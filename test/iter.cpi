type Range struct {
    start: i64,
    end: i64
}

fn until(end: i64) {
    return range(0, end);
}

fn range(start: i64, end: i64) {
    return cast(Range) {start, end};
}

#attr(Range) {
    fn empty(r: Range) {
        return r.start >= r.end;
    }

    fn front(r: Range) {
        return r.start;
    }

    fn popFront(r: *Range) {
        r.start += 1;
    }
}

fn zip(r1: !R1, r2: !R2) {
    type Zip struct{
        r1: R1,
        r2: R2
    }

    #attr(Zip) {
        fn empty(z: Zip) {
            return z.r1|:empty or z.r2|:empty;
        }

        fn front(z: Zip) {
            return {first: z.r1|:front, second: z.r2|:front};
        }

        fn popFront(z: *Zip) {
            &z.r1|:popFront;
            &z.r2|:popFront;
        }
    }

    return cast(Zip) { r1, r2 };
}

fn byRef(T := typeof(arr[0]))(arr: []T) {
    type ByRef struct {
        target: []T,
        current := 0
    }

    #attr(ByRef) {
        fn empty(b: ByRef) {
            return b.current >= b.target.count;
        }

        fn front(b: ByRef) {
            return &b.target[b.current];
        }

        fn popFront(b: *ByRef) {
            b.current += 1;
        }
    }

    return cast(ByRef) { arr };
}

fn reversed(T := typeof(r[0]))(r: []T) {
    type Reversed struct {
        value: []T,
        index: i64
    }

    #attr(Reversed) {
        fn empty(r: Reversed) {
            return  r.index == 0;
        }

        fn front(r: Reversed) {
            return r.value[r.index];
        }

        fn popFront(r: *Reversed) {
            r.index -= 1;
        }
    }

    return cast(Reversed) {r, r.count - 1};
}

fn withIndex(r: !R) {
    type WithIndex struct{
        value: R,
        index: i64
    }

    #attr(WithIndex) {
        fn empty(wi: WithIndex) {
            return wi.value|:empty;
        }

        fn front(wi: WithIndex) {
            return {value: wi.value|:front, index: wi.index};
        }

        fn popFront(wi: *WithIndex) {
            &wi.value|:popFront;
            wi.index += 1;
        }
    }

    return cast(WithIndex) { r, 0 };
}

fn filter(f: Ast)(range: !R) {
    #import "buffer";

    b := buffer.make!(typeof(range|:front))();
    for it: range {
        if f(it) {
            &b|:append(it);
        }
    }
    return b.buf|iter;
}
