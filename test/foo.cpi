fn putchar(c: i8) {
    s := ".";
    s[0] = c;
    puts(s);
}

fn mod( T := typeof(x) )(x: T, y: T) {
    return x - (x / y) * y;
}

fn printInt( T := typeof(t) )(t: T) {
    table := []{"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"};

    b: []i8;
    b.data = cast(*i8) malloc(20 * sizeof(i8));

    n := t;
    idx : i32 = 0;

    while n > 10 {
        m := mod(n, 10);
        n = n / 10;
        b[idx] = table[m][0];
        idx = idx + 1;
    }

    m := mod(n, 10);
    n = n / 10;
    b[idx] = table[m][0];

    while idx >= 0 {
        putchar(b[idx]);
        idx = idx - 1;
    }
}

fn print( T := typeof(t) )(t: T) {
    if #iskind(T, i8) {
        printInt(t);
    }
    else if #iskind(T, i32) {
        printInt(t);
    }
    else if #iskind(T, i64) {
        printInt(t);
    }
    else if #iskind(T, bool) {
        if t {
            puts("true");
        }
        else {
            puts("false");
        }
    }
    else if #iskind(T, []) {
        -- could be a string, or something else
        if #iskind(typeof(t[0]), i8) {
            puts(t);
        }
        else {
            puts("[]{");
            for it, i: t {
                print(it);
                if i < t.count - 1 { puts(", "); }
            }
            puts("}");
        }
    }
}

fn printMany( T := typeof(t) )(t: T) {
    #for it: t {
        print(it);
    }
}

fn saved() {
}

fn main() {
    printMany({ 123, " and ", false, " ", []{1, 2, 3} });
    puts("\n\n");

    return 0;
}

fn println(s: []i8) {
    puts(s); puts("\n");
}

fn assert(b: bool) {
    if b == false { panic(); }
}
