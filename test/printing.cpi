fn putchar(c: i8) {
    ch := ".";
    ch[0] = c;
    puts(ch);
}

fn mod(x: !T, y: T) {
    return x - (x / y) * y;
}

fn printInt(t: !T) {
    base := 10;
    table := []{"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"};

    b: []i8;
    b.data = cast(*i8) malloc(20 * sizeof(i8));

    n := cast(i64) t;
    idx : i32 = 0;

    while n > base {
        m := mod(n, base);
        n = n / base;
        b[idx] = table[m][0];
        idx = idx + 1;
    }

    m := mod(cast(i64) n, base);
    n = n / base;
    b[idx] = table[m][0];

    while idx >= 0 {
        putchar(b[idx]);
        idx = idx - 1;
    }
}

fn printHex(t: !T) {
    base := 16;
    table := []{"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"};

    b: []i8;
    b.data = cast(*i8) malloc(20 * sizeof(i8));

    n := cast(i64) t;
    idx : i32 = 0;

    while n > base {
        m := mod(n, base);
        n = n / base;
        b[idx] = table[m][0];
        idx = idx + 1;
    }

    m := mod(n, base);
    n = n / base;
    b[idx] = table[m][0];

    puts("0x");
    while idx >= 0 {
        putchar(b[idx]);
        idx = idx - 1;
    }
}

fn print(t: !T) {
    -- todo(chad): change these to #if
    #if #iskind(T, i8) {
        printInt(t);
    }
    else #if #iskind(T, i32) {
        printInt(t);
    }
    else #if #iskind(T, i64) {
        printInt(t);
    }
    else #if #iskind(T, f32) {
        print("<<some f32>>");
    }
    else #if #iskind(T, f64) {
        printInt("<<some f64>>");
    }
    else #if #iskind(T, bool) {
        if t {
            puts("true");
        }
        else {
            puts("false");
        }
    }
    else #if #iskind(T, []) {
        -- could be a string, or something else
        if #iskind(typeof(t[0]), i8) {
            puts(t);
        }
        else {
            puts("[]{");
            for it, i: t {
                print(it);
                if i < t.count - 1 { puts(", "); }
            }
            puts("}");
        }
    }
    else #if #iskind(T, struct) {
        puts("{");
        #for it, i: #fieldsof(T) {
            print(it.name);
            print(": ");
            print(t[i]);
            if i < #fieldsof(T).count - 1 { puts(", "); }
        }
        puts("}");
    }
    else #if #iskind(T, enum) {
        fieldCount2 := cast(i64) #fieldsof(T).count;

        puts("{");
        #for it, i: #fieldsof(T) {
            if t.tag == it.index {
                print(it.name);
                print(": ");
                print(t[it.index]);
            }
        }
        puts("}");
    }
    else if #iskind(T, *) {
        puts("*(");
        printHex(cast(i64) t);
        puts(")");
    }
}

fn printMany(t: !T) {
    #for it: t {
        print(it);
    }
}

fn printWithSeparator( sep: []i8 )(t: !T) {
    #for it, i: t {
        print(it);
        if i < #fieldsof(T).count - 1 {
            print(sep);
        }
    }
}

fn printWithSpaces(t: !T) {
    printWithSeparator!(" ")(t);
}

fn println(s: !T) {
    print(s); puts("\n");
}
