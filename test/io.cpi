#link "libc";

#import "mem";

type File none

SEEK_SET: i32 = 0;
SEEK_CUR: i32 = 1;
SEEK_END: i32 = 2;

fn fopen(filename: *i8, mode: *i8) *File
fn fseek(file: *File, offset: i64, whence: i32) i32
fn ftell(file: *File) i64
fn rewind(file: *File) none
fn fread(ptr: *i8, size: i64, nitems: i64, file: *File) i64
fn printf(str: *i8) none

fn cstr(str: []i8) {
    r := cast(*i8) mem.calloc(str.count + 1, sizeof(i8));
    mem.memcpy(cast(*none) r, cast(*none) str.data, str.count);
    return r;
}

fn readFile(name: []i8) {
    #import "printing": p;

    f := fopen(cstr(name), cstr("r"));
    if f == nil {
        p.println("could not open file\n");
        panic();
    }

    err := fseek(f, 0, SEEK_END);
    if err != 0 {
        p.printMany({"fseek error: ", err, "\n"});
        panic();
    }

    length := ftell(f);
    if length == -1 {
        p.println("got -1 for file size :(");
        panic();
    }

    rewind(f);

    buf := cast(*i8) mem.malloc(length * sizeof(i8));
    fread(buf, 1, length, f);

    s: []i8;
    s.data = buf;
    s.count = length;

    return s;
}
