#import "io";
#import "mem";

type Str []i8

type Bucket struct {
    key: !TKey,
    value: !TValue,
    next: *Bucket!(TKey, TValue) = nil
}

type Hash(TKey: Ast, TValue: Ast) struct {
    size: i64,
    buckets: []*Bucket!(TKey, TValue)
}

fn hash(TKey: Ast, TValue: Ast, bucketCount: i64)() {
    type BucketPtr *Bucket!(TKey, TValue)

    ht: Hash!(TKey, TValue);
    ht.buckets.count = bucketCount;
    ht.buckets.data = mem.alloc!(BucketPtr)(bucketCount);

    return ht;
}

#attr(Str) {
    fn hasher(s: Str) {
        return s.count;
    }

    fn equals(str1: Str, str2: Str) {
        if str1.count != str2.count { return false; }
        i := 0;
        while i < str1.count {
            if str1[i] != str2[i] { return false; }
            i += 1;
        }

        return true;
    }
}

type HashTest struct {
    x: i64,
    y: i64
}

#attr(HashTest) {
    fn hasher(s: HashTest) {
        return s.x;
    }

    fn equals(h1: HashTest, h2: HashTest) {
        return h1.x == h2.x and h1.y == h2.y;
    }
}

fn hashInsert(TKey := typeof(ht.buckets[0].key), TValue := typeof(ht.buckets[0].value))(ht: !HT, key: TKey, value: TValue) {
    hash := :hasher(key) mod ht.buckets.count;

    if ht.buckets[hash] != nil {
        lastBucket := ht.buckets[hash];

        if lastBucket.key | :equals(key) {
            lastBucket.value = value;
            return;
        }

        while lastBucket.next != nil {
            lastBucket = cast() lastBucket.next;

            if lastBucket.key | :equals(key) {
                lastBucket.value = value;
                return;
            }
        }

        bucket := mem.alloc!(typeof(^ht.buckets[0]))();
        bucket.key = key;
        bucket.value = value;

        lastBucket.next = bucket;
        ht.size += 1;
    }
    else {
        bucket := mem.alloc!(typeof(^ht.buckets[0]))();
        bucket.key = key;
        bucket.value = value;

        ht.buckets[hash] = bucket;
        ht.size += 1;
    }
}

fn hashGet(TKey := typeof(ht.buckets[0].key))(ht: !HT, key: TKey) {
    hash := :hasher(key) mod ht.buckets.count;

    if ht.buckets[hash] != nil {
        lastBucket := ht.buckets[hash];

        if lastBucket.key | :equals(key) {
            return &lastBucket.value;
        }

        while lastBucket.next != nil {
            lastBucket = lastBucket.next;
            if lastBucket.key | :equals(key) {
                return &lastBucket.value;
            }
        }
    }

    return nil;
}

fn test() {
    h := hash!(Str, i64, 10)();
    h2 := hash!(HashTest, Str, 10)();

    hashInsert(&h, "bar", 5);
    hashInsert(&h, "carr", 13);

    hashInsert(&h2, {2, 3}, "foo");
    hashInsert(&h2, {3, 4}, "bar");

    basic.assert(^hashGet(&h, "bar") == 5);
    basic.assert(^hashGet(&h, "carr") == 13);

    basic.assert(^hashGet(&h2, cast() {2, 3}) | :equals("foo"));
    basic.assert(^hashGet(&h2, cast() {3, 4}) | :equals("bar"));
}

