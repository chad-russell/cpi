#import "io";
#import "mem";

-- todo(chad): this should be built-in to the compiler
fn mod(x: !T, y: T) {
    return x - (x / y) * y;
}

type str []i8

fn hash(KeyType: Ast, ValueType: Ast, bucketCount: i64)() {
    type Bucket struct {
        key: KeyType,
        value: ValueType,
        next : *Bucket = nil
    }

    type Hash struct {
        size: i64,
        buckets: []*Bucket
    }

    ht := mem.heap!(Hash)({
        size: 0,
        buckets: cast([]*Bucket) {
            data: mem.alloc!(i64)(bucketCount),
            count: bucketCount
        }
    });

    return ht;
}

impl str {
    fn hasher(s: str) {
        return 0;
    }

    fn equals(str1: str, str2: str) {
        if str1.count != str2.count { return false; }
        i := 0;
        while i < str1.count {
            if str1[i] != str2[i] { return false; }
            i += 1;
        }

        return true;
    }
}

fn hashInsert(ht: !T, key: !KeyType, value: !ValueType) {
    hash := hasher(key) | mod(ht.buckets.count);

    if ht.buckets[hash] != nil {
        lastBucket := ht.buckets[hash];
        if lastBucket.key | equals(key) {
            lastBucket.value = value;
            return {};
        }

        while lastBucket.next != nil {
            lastBucket = lastBucket.next;

            if lastBucket.key | equals(key) {
                lastBucket.value = value;
                return {};
            }
        }

        bucket := mem.alloc!(typeof(^ht.buckets[0]))();
        bucket.key = key;
        bucket.value = value;

        lastBucket.next = bucket;
        ht.size += 1;
    }
    else {
        bucket := mem.alloc!(typeof(^ht.buckets[0]))();
        bucket.key = key;
        bucket.value = value;

        ht.buckets[hash] = bucket;
        ht.size += 1;
    }

    return {};
}

fn hashGet(ht: !T, key: !KeyType) {
    hash := hasher(key) | mod(ht.buckets.count);

    if ht.buckets[hash] != nil {
        lastBucket := ht.buckets[hash];
        if lastBucket.key | equals(key) {
            return &lastBucket.value;
        }

        while lastBucket.next != nil {
            lastBucket = lastBucket.next;
            if lastBucket.key | equals(key) {
                return &lastBucket.value;
            }
        }
    }

    return nil;
}

fn test() {
    h := hash!(str, i64, 10)();

    hashInsert(&h, "barrrrrr", 5);
    hashInsert(&h, "carrrrrr", 13);

    io.printMany({
        "bar is: ", ^hashGet(&h, "barrrrrr"), "\n",
        "car is: ", ^hashGet(&h, "carrrrrr"), "\n",
    });
}
