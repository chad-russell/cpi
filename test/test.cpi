fn main() {
    f := fn() {
        return fn() {
            return foo;
        };
    };

    assert(3 == f()()()());

    assert(apply(inc, 1) + apply_overboard(inc, 0) == 3);

    a3 := ^^^^^^&&&^&&&&^&^^&&3;
    assert(a3 == 3);

    a4_helper := &&&&^&&&&&&&&&a3;
    a4 := ^^^^^^^^^^^^a4_helper;
    assert(a4 == 3);

    a5 := a5_fn();
    assert(a5 == 3);

    a6 := (^^&&a5_fn)();
    assert(a6 == 3);

    a7 := (^&(fn() i64 { return 3; }))();
    assert(a7 == 3);

    a8_helper1 := &&bad;
    a8_helper2 := &&bar;
    ^a8_helper1 = ^a8_helper2;
    a8 := (^^a8_helper1)();
    assert(a8 == 3);

    a9 := testA9();
    assert(a9 == 3);

    a10 := testStruct1();
    assert(a10 == 3);

    a11 := testStruct2();
    assert(a11 == 3);

    a: i32 = 13;

    a12 := testNestedCall();
    assert(a12 == 3);

    a13 := testDerefParam();
    assert(a13 == 3);
    a19 := testSetter();
    assert(a19 == 3);

    a20 := testLinkedList();
    assert(a20 == 3);

    a21 := testWeirdLinkedList();
    assert(a21 == 9);

    a22 := testMoreDotsAndDerefs();
    assert(a22 == 3);

    test23();

    test24();

    test25();

    a15 := testDoubleDeref();
    assert(a15 == 3);

    a16 := more_struct();
    assert(a16 == 3);

    a17 := test_S2_stuff();
    assert(a17 == 3);

    a18 := testSetFromParam();
    assert(a18 == 3);

    assert(fib(10) == 89);

    assert(stupid_sqrt(5) == 0);

    assert(stupid_sqrt(9) == 3);

    assert(id!(i32)(3) == 3);

    p: pair;
    p.x = 8;
    assert(id(p).x == 8);

    assert(deref_ct(&3) == 3);

    assert(add_static!(3, 4)(5) == 12);

    assert(apply_static!(poly_inc)(3) == 4);

    assert(apply_static!(fn(x: i32) { return x + 3; })(3) == 6);

    baked := id!(pair);
    assert(baked(p).x == 8);

    testArray1();
    testArray2();
    testArray3();
    testArray4();
    testArray5();

    testArr1 := cast([]i64) {data: &{1, 2, 3}, count: cast(i32) 3};
    assert(inc(testArr1[1]) == 3);

    testWhile1();

    assert(sizeof(i32) == 4);
    assert(sizeof(i64) == 8);
    assert(sizeof(pair) == 16);

    testMalloc();

    testFor1();
    testFor2();
    testFor3();
    testFor4();

    testUnion1();
    testBuffer();
    testDefault();
    testAnySimple1();

    testPrinting();

    assert({1, 2, 3}[id(1)] == 2);

    return 0;
}

fn saved() {
}

fn testPrinting() {
    e: enum {x: i32, y: bool} = { y: false };
    printWithSpaces({123, "string", false, []{1, 2, 3}, {x: 3, y: &8767} , e});

    puts("\n\n");
}

fn testUnion1() {
    type unionFoo struct {
        f: i64
    }

    type unionBar struct {
        b1: i32,
        b2: i32
    }

    x: unionFoo = {18};
    y: unionBar;

    a : enum {x: unionFoo, y: unionBar};

    a.x = x;

    assert(a.x.f == 18);
    assert(a.tag == 1);

    a.y = y;
    assert(a.tag == 2);

    a.x.f = 13;
    assert(a.tag == 1);

    a.y.b2 = 18;
    assert(a.tag == 2);
}

fn testFor1() {
    product := 1;
    for e: []{2, 3, 4, 5} {
        product = product * e;
    }
    assert(product == 120);
}

fn testFor2() {
    fn add_array(arr: []i32) {
        sum : i32 = 0;
        for e: arr { sum = sum + e; }
        return sum;
    }

    arr: []i32 = []i32{1, 2, 3, 4, 5};
    assert(15 == add_array([]i32{1, 2, 3, 4, 5}));
}

fn testFor3() {
    sum := 0;
    for e: []{1, 2, 3} {
        for e: []{4, 5, 6} {
            sum = sum + e;
        }
        sum = sum + e;
    }
    assert(sum == 51);
}

fn testFor4() {
    isum := 0;
    for e, i: []{1, 1, 1, 1999, 1} {
        isum = isum + i;
    }
    assert(isum == 10);
}

fn testDefault() {
    p1: struct{x := 9, y := 10};
    assert(p1.x == 9);
    assert(p1.y == 10);

    p2: struct{x := 9, y := 10} = {y: 5, x: 15};
    assert(p2.x == 5);
    assert(p2.y == 15);
}

fn alloc_pair() {
    return cast(*pair) malloc(sizeof(pair));
}

fn testMalloc() {
    b := alloc_pair();
    b.x = 18;
    b.y = 199;

    c := alloc_pair();
    c.x = 19;
    c.y = 200;

    assert(b.y == 199);
}

fn testWhile1() {
    a := 3;
    while a != 10 {
        a = a + 1;
    }
    assert(a == 10);
}

fn testArray1() {
    count: i32 = 5;
    a := cast([]i64) {&{1, 2, 3, 4, 5}, count};

    assert(a[2] == 3);
    assert(^&(a[2]) == 3);
    assert((^&a)[2] == 3);

    (^^&^&&a)[2] = 19;
    assert(a[2] == 19);

    p2 := &(a[2]);
    ^p2 = 23;

    assert(a[2] == 23);
}

fn testArray2() {
    count: i32 = 3;

    point_array := cast([]point) {&{{1, 1}, {2, 3}, {4, 5}}, count};

    assert(point_array[1].y == 3);

    count = 3;
    e1: i32 = 1;
    e2: i32 = 2;
    e3: i32 = 3;

    assert([]{e1, e2, e3}[1] == 2);
}

fn testArray3() {
    count: i32 = 3;
    e1: i32 = 1;
    e2: i32 = 2;
    e3: i32 = 3;

    arr := cast([]i32) {&{e1, e2, e3}, count};
    copied := arr;

    assert(arr[1] == 2);
    assert(copied[1] == 2);

    arr[1] = 18;
    assert(arr[1] == 18);
    assert(copied[1] == 18);

    copied[1] = 99;
    assert(arr[1] == 99);
    assert(copied[1] == 99);
}

fn testArray4() {
    count: i32 = 3;

    type PointyPoint struct {
        x: **i64,
        y: **i64
    }

    p: PointyPoint = {&&0, &&0};
    py := p.y;

    a := []PointyPoint{{&&0, &&0}, p, {&&0, &&0}};

    ^^a[1].y = 18;
    assert(^^py == 18);
}

fn testArray5() {
    count: i32 = 1;
    a1 := cast([][]i64) {&{{&3, count}}, count};
    assert(a1[0][0] == 3);

    assert([]{1, 2, 3}[2] == 3);
    a2 := []{[]{1, 2, 3}, []{4, 5, 6}, []{7, 8, 9}};
    assert(a2[1][2] == 6);
}

fn assert(b: bool) {
    if (b == false) { panic(); }
}

fn apply_static(f: Ast)(t: i32) {
    return f(t);
}

fn poly_inc(T := typeof(n))(n: i32) {
    return n + 1;
}

fn id(T := typeof(t))(t: T) T {
    return t;
}

fn deref_ct(T := typeof(t))(t: T) {
    return ^t;
}

fn add_static(T: i32, U: i32)(m: i32) {
    return T + U + m;
}

fn stupid_sqrt(n: i64) {
    if n == 1 {
        return 1;
    } else if n == 4 {
        return 2;
    } else if n == 9 {
        return 3;
    } else if n == 16 {
        return 4;
    }

    -- couldn't find a sqrt, oh well!
    return 0;
}

fn test24() {
    type Foo struct {
        value: i32,
        bar: **Bar
    }

    type Bar struct {
        value: i32,
        baz: Baz
    }

    type Baz struct {
        value: i32,
        qux: *****Qux
    }

    type Qux struct {
        value: i32,
        foo: *Foo
    }

    foo: Foo;
    foo.value = 555;

    bar: Bar;
    bar.value = 666;

    baz: Baz;
    baz.value = 777;

    qux: Qux;
    qux.value = 888;

    qux.foo = &foo;
    baz.qux = &&&&&qux;
    bar.baz = baz;
    foo.bar = &&bar;

    foo.bar.baz.qux.value = 6;
    assert(foo.bar.baz.qux.value == 6);
    assert(bar.baz.qux.value == 6);
    assert(baz.qux.value == 6);
    assert(qux.value == 6);

    bar.baz.qux.value = 8;
    assert(foo.bar.baz.qux.value == 8);
    assert(bar.baz.qux.value == 8);
    assert(baz.qux.value == 8);
    assert(qux.value == 8);

    qux.value = 3;
    assert(foo.bar.baz.qux.value == 3);
    assert(bar.baz.qux.value == 3);
    assert(baz.qux.value == 3);
    assert(qux.value == 3);

    foo.bar.baz.qux.foo.bar.baz.qux.foo.bar.baz.qux.foo.bar.baz.qux.foo.bar.baz.qux.foo.bar.baz.qux.foo.bar.baz.qux.value = 39;
    assert(foo.bar.baz.qux.foo.bar.baz.qux.foo.bar.baz.qux.foo.bar.baz.qux.foo.bar.baz.qux.foo.bar.baz.qux.foo.bar.baz.qux.foo.bar.baz.qux.foo.bar.baz.qux.foo.bar.baz.qux.value == 39);
}

fn foo() {
    return bar;
}

type weirdLinkedList struct {
    value: i64,
    next: *******weirdLinkedList
}

fn testWeirdLinkedList() {
    l: weirdLinkedList;
    l.value = 999;
    l.next = &&&&&&&l;

    l.next.next.next.next.next.next.next.next.value = 3;

    return l.value + l.next.value + l.next.next.next.next.value;
}

type pair struct {
    x: i64,
    y: i64
}

fn testMoreDotsAndDerefs() {
    p: pair;
    p.x = 1;
    p.y = 2;

    return (^^&&p).x + ^^&&(p.y);
}

type linkedList struct {
    value: i64,
    next: *linkedList
}

fn testLinkedList() {
    l: linkedList;
    l.value = 3;
    l.next = &l;

    return l.next.next.next.next.value;
}

fn set_y(p: *point, y: i64) {
    p.y = y;
    return y;
}

fn testSetter() {
    p: point;
    p.x = bad();
    p.y = bad();
    set_y(^&&p, 3);
    return p.y;
}

fn testSetFromParam() {
    a : i64 = 999;
    set(&a);
    return a;
}

fn set(n: *i64) {
    ^n = 3;
    return 999;
}

fn test_S2_stuff() {
    s: S2;
    sx := {p1: bad(), p2: 2};

    s.x = &&sx;

    return s.x.p2 + 1;
}

type S2 struct {
	x: **struct {
		p1: i64,
		p2: i64
	},
	y: fn() i64
}

fn more_struct() {
    s: S;
    psx := &&&s.x;
    psx.p2 = bad();

    new_sx : struct{ p1: i64, p2: i64 };
    new_sx.p2 = 3;

    ^^^psx = new_sx;

    return s.x.p2;
}

fn testDoubleDeref() {
    p: point;
    p.y = 3;

    q := &p;
    q1 := ^q;
    q2 := ^q;

    return p.y + q1.y - q2.y;
}

fn testA9Helper() {
    a9 := bad();
    a9_p := &&&a9;
    ^^^a9_p = 3;
    return ^^^a9_p;
}

fn testA9() {
    return testA9Helper();
}

fn testBug1() {
    p: point;
    p.y = 123;

    q := &&p;
    qq1 := ^q;
    qq1.y = 3;

    assert(p.y == 3);
    -- assert(q.y == 3);
    -- assert(qq1.y == 3);
}

fn deref(i: *i64) {
    return ^i;
}

type point struct {
    x: i64,
    y: i64
}

fn point_get_x(p: point) { return p.x; }

fn point_id(p: point) { return p; }

fn testNestedCall() {
    p: point;
    p.x = 3;
    p.y = bad();
    return point_get_x(point_id(point_id(point_id(point_id(point_id(point_id(p)))))));
}

fn testDerefParam() {
    return deref(&3);
}

type S struct {
	x: struct {
		p1: i64,
		p2: i64
	},
	y: i64
}

fn fib(n: i32) i32 {
    if n == 0 { return 1; }
    if n == 1 { return 1; }
    return fib(n - 1) + fib(n - 2);
}

fn testStruct1() {
	f: S;
	f.y = 3;
	return ^^&&(f.y);
}

fn testStruct2() {
	f: S;
	f.y = 3;
	return f.y;
}

fn bad() i64 { return 999; }

fn a5_fn() {
    f := fn() i64 { return 3; };
    p := &f;
    return (^p)();
}

fn bar() i64 {
    return 3;
}

fn inc(n: i64) {
    return n + 1;
}

fn apply(a: fn(n: i64) i64, b: i64) {
    return a(b);
}

fn apply_overboard(a: fn(n: i64) i64, b: i64) {
    return fn(f: fn(n: i64) i64, g: i64) {
        return f(g);
    }(a, b);
}

fn test25() {
    type Foo struct {
        value: i32,
        bar: *Bar
    }

    type Bar struct {
        value: i32,
        baz: *Baz
    }

    type Baz struct {
        value: i32,
        qux: *Qux
    }

    type Qux struct {
        value: **i64
    }

    foo: Foo;
    bar: Bar;
    baz: Baz;
    qux: Qux;

    foo.value = 111;
    bar.value = 222;
    baz.value = 333;
    qux.value = &&444;

    foo.bar = &bar;
    bar.baz = &baz;
    baz.qux = &qux;

    baz2: Baz;
    baz2.value = 9876;
    baz2.qux = &qux;

    ^^foo.bar.baz.qux.value = 443;

    assert(^^foo.bar.baz.qux.value == 443);
    assert(^^bar.baz.qux.value == 443);
    assert(^^baz.qux.value == 443);
    assert(^^qux.value == 443);

    ^^bar.baz.qux.value = 442;
    assert(^^foo.bar.baz.qux.value == 442);
    assert(^^bar.baz.qux.value == 442);
    assert(^^baz.qux.value == 442);
    assert(^^qux.value == 442);
}

fn test23() {
    type Foo struct {
        value: i32,
        bar: *Bar
    }

    type Bar struct {
        value: i32,
        baz: Baz
    }

    type Baz struct {
        value: i32,
        qux: **Qux
    }

    type Qux struct {
        value: **i32,
        f: *fn() i32
    }

    foo: Foo;
    bar: Bar;
    baz: Baz;
    qux: Qux;

    foo.value = 111;
    bar.value = 222;
    baz.value = 333;
    qux.value = &&444;
    qux.f = &fn() { return 123; };

    baz.qux = &&qux;
    bar.baz = baz;
    foo.bar = &bar;

    fn setComplexBarFromParam(bar: Bar) {
        ^^bar.baz.qux.value = 3;
    }
    setComplexBarFromParam(bar);

    assert((^bar.baz.qux.f)() == 123);

    assert(3 == ^^foo.bar.baz.qux.value);
    assert(3 == ^^bar.baz.qux.value);
    assert(3 == ^^baz.qux.value);
    assert(3 == ^^qux.value);
}

fn buffer(T: Ast)(capacity: i64) {
    buf: []T;
    buf.count = 0;
    buf.data = cast(*T) malloc(capacity * sizeof(T));

    return {
        capacity: capacity,
        buf: buf
    };
}

fn ensureCapacity( T := typeof(b), E := typeof(b.buf[0]) )(b: T, index: i64) {
    if b.capacity == 0 {
        b.capacity = 1;
    }

    while index >= b.capacity {
        b.capacity = b.capacity * 2;

        newBuf: []E;
        newBuf.count = b.buf.count;
        newBuf.data = cast(*E) malloc(b.capacity * sizeof(E));

        idx := 0;
        while idx < b.buf.count {
            newBuf[idx] = b.buf[idx];
            idx = idx + 1;
        }

        b.buf = newBuf;
    }
}

fn buffer_set( T := typeof(^b), E := typeof(b.buf[0]) )(b: *T, index: i64, e: E) {
    ensureCapacity(b, index);

    b.buf[index] = e;
    return b.capacity;
}

fn buffer_get( T := typeof(b) )(b: T, index: i64) {
    ensureCapacity(b, index);
    return b.buf[index];
}

fn testBuffer() {
    type foo struct {
        x: i32,
        y: i32
    }

    b := buffer!(foo)(0);

    f: foo;
    f.x = 3;
    f.y = 4;

    buffer_set(&b, 200, f);

    assert(buffer_get(&b, 200).x == 3);
    assert(buffer_get(&b, 200).y == 4);
}

fn testAnySimple1() {
    type ParamData struct {
        name:  []i8,
        _type: *TypeInfo
    }

    type StructData struct {
        params: []ParamData
    }

    type EnumData struct {
        params: []ParamData
    }

    type FnData struct {
        params:     []ParamData,
        returnType: *TypeInfo
    }

    type PointerData struct {
        underlyingType: *TypeInfo
    }

    type ArrayData struct {
        elementType: *TypeInfo
    }

    type TypeInfo enum {
        NONE:          none,
        INT_LITERAL:   i64,
        I8:            none,
        I32:           none,
        I64:           none,
        FLOAT_LITERAL: f64,
        BOOLEAN:       none,
        F32:           none,
        F64:           none,
        FN:            FnData,
        STRUCT:        StructData,
        POINTER:       PointerData,
        ENUM:          EnumData,
        ARRAY:         ArrayData,
    }

    type Any struct {
        _type:  TypeInfo,
        value:  *none
    }

    a : Any = {
        _type: {
            STRUCT: {
                params: []ParamData{
                    {
                        name: "fuck",
                        _type: &{I8: {}},
                    }
                }
            }
        },
        value: cast(*none) &77
    };

    assert(a._type.STRUCT.params[0]._type.tag == 3);
    assert(a._type.STRUCT.params[0].name[3] == "duck"[3]);
}

fn putchar(c: i8) {
    s := ".";
    s[0] = c;
    puts(s);
}

fn mod( T := typeof(x) )(x: T, y: T) {
    return x - (x / y) * y;
}

fn printInt( T := typeof(t) )(t: T) {
    base := 10;
    table := []{"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"};

    b: []i8;
    b.data = cast(*i8) malloc(20 * sizeof(i8));

    n := t;
    idx : i32 = 0;

    while n > base {
        m := mod(n, base);
        n = n / base;
        b[idx] = table[m][0];
        idx = idx + 1;
    }

    m := mod(n, base);
    n = n / base;
    b[idx] = table[m][0];

    while idx >= 0 {
        putchar(b[idx]);
        idx = idx - 1;
    }
}

fn printHex( T := typeof(t) )(t: T) {
    base := 16;
    table := []{"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"};

    b: []i8;
    b.data = cast(*i8) malloc(20 * sizeof(i8));

    n := t;
    idx : i32 = 0;

    while n > base {
        m := mod(n, base);
        n = n / base;
        b[idx] = table[m][0];
        idx = idx + 1;
    }

    m := mod(n, base);
    n = n / base;
    b[idx] = table[m][0];

    puts("0x");
    while idx >= 0 {
        putchar(b[idx]);
        idx = idx - 1;
    }
}

fn print( T := typeof(t) )(t: T) {
    if #iskind(T, i8) {
        printInt(t);
    }
    else if #iskind(T, i32) {
        printInt(t);
    }
    else if #iskind(T, i64) {
        printInt(t);
    }
    else if #iskind(T, f32) {
        print("<<some f32>>");
    }
    else if #iskind(T, f64) {
        printInt("<<some f64>>");
    }
    else if #iskind(T, bool) {
        if t {
            puts("true");
        }
        else {
            puts("false");
        }
    }
    else if #iskind(T, []) {
        -- could be a string, or something else
        if #iskind(typeof(t[0]), i8) {
            puts(t);
        }
        else {
            puts("[]{");
            for it, i: t {
                print(it);
                if i < t.count - 1 { puts(", "); }
            }
            puts("}");
        }
    }
    else if #iskind(T, struct) {
        puts("{");
        #for it, i: #fieldsof(T) {
            print(it.name);
            print(": ");
            print(t[i]);
            if i < #fieldsof(T).count - 1 { puts(", "); }
        }
        puts("}");
    }
    else if #iskind(T, enum) {
        fieldCount2 := cast(i64) #fieldsof(T).count;

        puts("{");
        #for it, i: #fieldsof(T) {
            if t.tag == it.index {
                print(it.name);
                print(": ");
                print(t[it.index]);
            }
        }
        puts("}");
    }
    else if #iskind(T, *) {
        puts("*(");
        printHex(cast(i64) t);
        puts(")");
    }
}

fn printMany( T := typeof(t) )(t: T) {
    #for it: t {
        print(it);
    }
}

fn printWithSeparator( sep: []i8, T := typeof(t) )(t: T) {
    fieldCount := #fieldsof(T).count;

    #for it, i: t {
        print(it);
        if i < fieldCount - 1 {
            print(sep);
        }
    }
}

fn printWithSpaces( T := typeof(t) )(t: T) {
    printWithSeparator!(", ")(t);
}

fn println(s: []i8) {
    puts(s); puts("\n");
}
