#import "io";
#import "buffer";

fn main() {
    runAllTests();
    
    return 0;
}

fn runAllTests() {
    f := fn() {
        return fn() {
            return foo;
        };
    };

    assert(3 == f()()()());

    assert(apply(inc, 1) + apply_overboard(inc, 0) == 3);

    a3 := ^^^^^^&&&^&&&&^&^^&&3;
    assert(a3 == 3);

    a4_helper := &&&&^&&&&&&&&&a3;
    a4 := ^^^^^^^^^^^^a4_helper;
    assert(a4 == 3);

    a5 := a5_fn();
    assert(a5 == 3);

    a6 := (^^&&a5_fn)();
    assert(a6 == 3);

    a7 := (^&(fn() i64 { return 3; }))();
    assert(a7 == 3);
    a8_helper1 := &&bad;
    a8_helper2 := &&bar;
    ^a8_helper1 = ^a8_helper2;
    a8 := (^^a8_helper1)();
    assert(a8 == 3);

    a9 := testA9();
    assert(a9 == 3);

    a10 := testStruct1();
    assert(a10 == 3);

    a11 := testStruct2();
    assert(a11 == 3);

    a12 := testNestedCall();
    assert(a12 == 3);

    a13 := testDerefParam();
    assert(a13 == 3);

    a19 := testSetter();
    assert(a19 == 3);

    a20 := testLinkedList();
    assert(a20 == 3);

    a21 := testWeirdLinkedList();
    assert(a21 == 9);

    a22 := testMoreDotsAndDerefs();
    assert(a22 == 3);

    test23();

    test24();

    test25();

    a15 := testDoubleDeref();
    assert(a15 == 3);

    testArray1();

    a16 := more_struct();
    assert(a16 == 3);

    a17 := test_S2_stuff();
    assert(a17 == 3);

    a18 := testSetFromParam();
    assert(a18 == 3);

    assert(fib(10) == 89);

    assert(stupid_sqrt(5) == 0);

    assert(stupid_sqrt(9) == 3);

    assert(id!(i32)(cast(i32) 3) == 3);

    p: pair;
    p.x = 8;
    assert(id(p).x == 8);

    assert(deref_ct(&3) == 3);

    assert(add_static!(3, 4)(5) == 12);

    assert(apply_static!(poly_inc)(3) == 4);

    assert(apply_static!(fn(x: i32) { return x + 3; })(3) == 6);

    baked := id!(pair);
    assert(baked(p).x == 8);

    testArray1();
    testArray2();
    testArray3();
    testArray4();
    testArray5();

    testArr1 := cast([]i64) {data: &{1, 2, 3}, count: cast(i32) 3};
    assert(inc(testArr1[1]) == 3);

    testWhile1();

    assert(sizeof(i32) == 4);
    assert(sizeof(i64) == 8);
    assert(sizeof(pair) == 16);

    testMalloc();

    testFor1();
    testFor2();
    testFor3();
    testFor4();

    testUnion1();

    testBuffer();

    testDefault();
    testDefault2();

    testAnySimple1();

    testPrinting();

    assert({1, 2, 3}[id(1)] == 2);

    testModule();

    assert(testModule2() == 5);

    testModule3();

    assert(topLevel == 123);

    assert(testDefer() == 4);

    testPipe();

    io.printMany({"fuckme: ", fuckme, "\n"});

    assert(test2.a == 7);
    assert(test2.test.test2.test.test2.bbb() == test2.test.topLevel);

    testIteration(cast(I64) 5);
    io.println("--------");
    testIteration(cast(String) "foo");

    assert(context.id == 0);
    incrementContextId();
    assert(context.id == 1);

    testHash();

    testPolyCast();

    testPolyRecursion();

    testPolyImpl();

    testIter2();

    testIter3();

    testNestedPoly();
}

fn testNestedPoly() {
    type Foo(T: Ast) T

    a: Foo!(Foo!(Foo!(Foo!(Foo!(i64))))) = 13;

    assert(#iskind(typeof(a), i64));
    assert(a == 13);
}

fn testPolyCast() {
    type Foo struct {
        x: !T,
        y: T
    }

    a := cast(Foo) { 3, 4 };
    b := cast(Foo) {3.1, 4.1 };

    assert(#iskind(typeof(a.x), i64));
    assert(#iskind(typeof(b.x), f32));
}

fn testIter3() {
    type ArrRefRange(T := typeof(arr[0])) struct {
        arr: []T,
        curr := 0
    }

    #impl fn empty(r: !R/ArrRefRange) {
        return r.curr >= r.arr.count;
    }

    #impl fn front(r: !R/ArrRefRange) {
        return r.arr[r.curr];
    }

    #impl fn popFront(R := typeof(^r))(r: *R/ArrRefRange) {
        r.curr += 1;
    }

    fn iter(T := typeof(arr[0]))(arr: []T) {
        return cast(ArrRefRange) { arr };
    }

    fn map(f: Ast)(range: !R) {
        #import "buffer";

        b := buffer.make!(typeof(front(range)))();
        for it: range {
            &b|buffer.append(f(it));
        }
        return b.buf|iter;
    }

    fn filter(f: Ast)(range: !R) {
        #import "buffer";

        b := buffer.make!(typeof(front(range)))();
        for it: range {
            if f(it) {
                &b|buffer.append(it);
            }
        }
        return b.buf|iter;
    }

    fn collect(t: !T) {
        return t.arr;
    }

    answer := []{1, 2, 3, 4, 5}
                | iter
                | map!(fn(x: !T) { return x * x; })
                | filter!(fn(x: !T) { return x < 10; })
                | collect;

    assert(answer.count == 3);
    assert(answer[0] == 1);
    assert(answer[1] == 4);
    assert(answer[2] == 9);
}

fn testIter2() {
    type ArrRefRange(T := typeof(arr[0])) struct {
        arr: []T,
        curr := 0
    }

    #impl fn empty(r: !R/ArrRefRange) {
        return r.curr >= r.arr.count;
    }

    #impl fn front(r: !R/ArrRefRange) {
        return &r.arr[r.curr];
    }

    #impl fn popFront(R := typeof(^r))(r: *R/ArrRefRange) {
        r.curr += 1;
    }

    arr := []{1, 2, 3};
    for it: cast(ArrRefRange) { arr } {
        ^it *= ^it;
    }

    assert(arr[0] == 1);
    assert(arr[1] == 4);
    assert(arr[2] == 9);
}

fn testPolyImpl() {
    type FooPair struct {
        x: !T,
        y: T
    }

    #impl fn implTest(t: !T/FooPair) {
        return 5;
    }

    type BarPair struct {
        x: !T,
        y: T
    }

    #impl fn implTest(t: !T/BarPair) {
        return 13;
    }

    f1: FooPair = {3, 4};
    f2: FooPair = {true, false};

    b: BarPair = {3, 4};

    (f1|implTest == 5)|assert;
    (f2|implTest == 5)|assert;

    (b|implTest == 13)|assert;
}

fn testPolyRecursion() {
    type PolyLinkedList(default: Ast) struct {
        val := default,
        next: *PolyLinkedList!(default) = nil
    }

    fn polyFib(n: !T) {
        if n == 0 or n == 1 { return 1; }
        return polyFib(n - 1) + polyFib(n - 2);
    }

    p: PolyLinkedList!(polyFib(8));
    p.next = &p;
    assert(p.next.next.next.next.val == 34);
}

fn testHash() {
    #import "hash";
    hash.test();
}

fn incrementContextId() {
    context.id += 1;
}

fn testPipe() {
    fn polyInc(x: !T) { return x + 1; }
    dec := fn(x: i64) { return x - 1; };

    x := polyInc(2);
    y := x|polyInc|dec|(fn omg(x: i64) { return x - 1; });

    assert(y == 2);
}

fn testDefer() {
    a := 3;
    defer {
        a += 1;
    }
    return a;
}

fn testModule3() {
    module foo {
        a := 2;
        module bar {
            a := 3;
            module baz {
                a := 4;
            }
        }
    }

    #import foo.bar.baz;
    assert(a == 4);
}

fn testModule2() {
    module foo {
        a := 3;
    }

    module bar {
        a := 5;
    }

    if false {
        #import foo;
        return a;
    }
    else {
        #import bar;
        return a;
    }

    return 10;
}

fn testModule() {
    module m1 {
        fn f() {
            return 4;
        }

        module m2 {
            fn f() {
                return 3;
            }
        }
    }
    fn f() { return 5; }

    assert(f() == 5);
    assert(m1.f() == 4);
    assert(m1.m2.f() == 3);
}

fn testPrinting() {
    t: enum { YES, NO, MAYBE };
    e: union {x: i32, y: bool} = { y: false };
    io.printWithSpaces({
        123,
        "string",
        false,
        []{1, 2, 3},
        {x: 3, y: &8767},
        e,
        t,
        "\n\n"
    });
}

fn testUnion1() {
    type unionFoo struct {
        f: i64
    }

    type unionBar struct {
        b1: i32,
        b2: i32
    }

    x: unionFoo = {18};
    y: unionBar;

    a : union {x: unionFoo, y: unionBar};

    a.x = x;

    assert(a.x.f == 18);
    assert(a.tag == 1);

    a.y = y;
    assert(a.tag == 2);

    a.x.f = 13;
    assert(a.tag == 1);

    a.y.b2 = 18;
    assert(a.tag == 2);
}

fn testFor1() {
    product := 1;
    for e: []{2, 3, 4, 5} {
        product = product * e;
    }
    assert(product == 120);
}

fn testFor2() {
    fn add_array(arr: []i32) {
        sum : i32 = 0;
        for e: arr { sum = sum + e; }
        return sum;
    }

    arr: []i32 = []i32{1, 2, 3, 4, 5};
    assert(15 == add_array([]i32{1, 2, 3, 4, 5}));
}

fn testFor3() {
    sum := 0;
    for e: []{1, 2, 3} {
        for e: []{4, 5, 6} {
            sum = sum + e;
        }
        sum = sum + e;
    }
    assert(sum == 51);
}

fn testFor4() {
    isum := 0;
    for e, i: []{1, 1, 1, 1999, 1} {
        isum = isum + i;
    }
    assert(isum == 10);
}

fn testDefault() {
    p1: struct{x := 9, y := 10};
    assert(p1.x == 9);
    assert(p1.y == 10);

    p2: struct{x := 9, y := 10} = {y: 5, x: 15};
    assert(p2.x == 15);
    assert(p2.y == 5);
}

fn testDefault2() {
    type TD2 struct {
        x := 3
    }

    t: TD2;
    assert(t.x == 3);

    t = ^&{};
    assert(t.x == 3);

    t2: TD2 = {};
    assert(t2.x == 3);

    fn getTDx(t: TD2) { return t.x; }
    assert(getTDx({}) == 3);
}

#import "mem";

fn alloc_pair() {
    return cast(*pair) mem.malloc(sizeof(pair));
}

fn testMalloc() {
    b := alloc_pair();
    defer { mem.free(cast(*none) b); }
    b.x = 18;
    b.y = 199;

    c := alloc_pair();
    defer { mem.free(cast(*none) c); }
    c.x = 19;
    c.y = 200;

    assert(b.x == 18);
    assert(b.y == 199);

    assert(c.x == 19);
    assert(c.y == 200);
}

fn testWhile1() {
    a := 3;
    while a != 10 {
        a += 1;
    }
    assert(a == 10);
}

fn testArray1() {
    count: i32 = 5;
    a := cast([]i64) {&{1, 2, 3, 4, 5}, count};

    assert(a[2] == 3);
    assert(^&(a[2]) == 3);
    assert((^&a)[2] == 3);

    (^^&^&&a)[2] = 19;
    assert(a[2] == 19);

    p2 := &(a[2]);
    ^p2 = 23;

    assert(a[2] == 23);
}

fn testArray2() {
    count: i32 = 3;

    point_array := cast([]point) {&{{1, 1}, {2, 3}, {4, 5}}, count};

    assert(point_array[1].y == 3);

    count = 3;
    e1: i32 = 1;
    e2: i32 = 2;
    e3: i32 = 3;

    assert([]{e1, e2, e3}[1] == 2);
}

fn testArray3() {
    count: i32 = 3;
    e1: i32 = 1;
    e2: i32 = 2;
    e3: i32 = 3;

    arr := cast([]i32) {&{e1, e2, e3}, count};
    copied := arr;

    assert(arr[1] == 2);
    assert(copied[1] == 2);

    arr[1] = 18;
    assert(arr[1] == 18);
    assert(copied[1] == 18);

    copied[1] = 99;
    assert(arr[1] == 99);
    assert(copied[1] == 99);
}

fn testArray4() {
    count: i32 = 3;

    type PointyPoint struct {
        x: **i64,
        y: **i64
    }

    p: PointyPoint = {&&0, &&0};
    py := p.y;

    a := []PointyPoint{{&&0, &&0}, p, {&&0, &&0}};

    ^^a[1].y = 18;
    assert(^^py == 18);
}

fn testArray5() {
    count: i32 = 1;
    a1 := cast([][]i64) {&{{&3, count}}, count};
    assert(a1[0][0] == 3);

    assert([]{1, 2, 3}[2] == 3);
    a2 := []{[]{1, 2, 3}, []{4, 5, 6}, []{7, 8, 9}};
    assert(a2[1][2] == 6);
}

fn assert(b: bool) {
    if (b == false) { panic(); }
}

fn apply_static(f: Ast)(t: i32) {
    return f(t);
}

fn poly_inc(n: !T) {
    return n + 1;
}

fn id(t: !T) T {
    return t;
}

fn idC(t: !T) {
    io.println({id: context.id});
    return t;
}

fuckme := idC(3);

fn deref_ct(t: !T) {
    return ^t;
}

fn add_static(T: i32, U: i32)(m: i32) {
    return T + U + m;
}

fn stupid_sqrt(n: i64) {
    if n == 1 {
        return 1;
    } else if n == 4 {
        return 2;
    } else if n == 9 {
        return 3;
    } else if n == 16 {
        return 4;
    }

    -- couldn't find a sqrt, oh well!
    return 0;
}

fn test24() {
    type Foo struct {
        value: i32,
        bar: **Bar
    }

    type Bar struct {
        value: i32,
        baz: Baz
    }

    type Baz struct {
        value: i32,
        qux: *****Qux
    }

    type Qux struct {
        value: i32,
        foo: *Foo
    }

    foo: Foo;
    foo.value = 555;

    bar: Bar;
    bar.value = 666;

    baz: Baz;
    baz.value = 777;

    qux: Qux;
    qux.value = 888;

    qux.foo = &foo;
    baz.qux = &&&&&qux;
    bar.baz = baz;
    foo.bar = &&bar;

    foo.bar.baz.qux.value = 6;
    assert(foo.bar.baz.qux.value == 6);
    assert(bar.baz.qux.value == 6);
    assert(baz.qux.value == 6);
    assert(qux.value == 6);

    bar.baz.qux.value = 8;
    assert(foo.bar.baz.qux.value == 8);
    assert(bar.baz.qux.value == 8);
    assert(baz.qux.value == 8);
    assert(qux.value == 8);

    qux.value = 3;
    assert(foo.bar.baz.qux.value == 3);
    assert(bar.baz.qux.value == 3);
    assert(baz.qux.value == 3);
    assert(qux.value == 3);

    foo.bar.baz.qux.foo.bar.baz.qux.foo.bar.baz.qux.foo.bar.baz.qux.foo.bar.baz.qux.foo.bar.baz.qux.foo.bar.baz.qux.value = 39;
    assert(foo.bar.baz.qux.foo.bar.baz.qux.foo.bar.baz.qux.foo.bar.baz.qux.foo.bar.baz.qux.foo.bar.baz.qux.foo.bar.baz.qux.foo.bar.baz.qux.foo.bar.baz.qux.foo.bar.baz.qux.value == 39);
}

fn foo() {
    return bar;
}

type weirdLinkedList struct {
    value: i64,
    next: *******weirdLinkedList
}

fn testWeirdLinkedList() {
    l: weirdLinkedList;
    l.value = 999;
    l.next = &&&&&&&l;

    l.next.next.next.next.next.next.next.next.value = 3;

    return l.value + l.next.value + l.next.next.next.next.value;
}

type pair struct {
    x: i64,
    y: i64
}

fn testMoreDotsAndDerefs() {
    p: pair;
    p.x = 1;
    p.y = 2;

    return (^^&&p).x + ^^&&(p.y);
}

type linkedList struct {
    value: i64,
    next: *linkedList
}

fn testLinkedList() {
    l: linkedList;
    l.value = 3;
    l.next = &l;

    return l.next.next.next.next.value;
}

fn set_y(p: *point, y: i64) {
    p.y = y;
    return y;
}

fn testSetter() {
    p: point;
    p.x = bad();
    p.y = bad();
    set_y(^&&p, 3);
    return p.y;
}

fn testSetFromParam() {
    a : i64 = 999;
    set(&a);
    return a;
}

fn set(n: *i64) {
    ^n = 3;
    return 999;
}

fn test_S2_stuff() {
    s: S2;
    sx := {p1: bad(), p2: 2};

    s.x = &&sx;

    return s.x.p2 + 1;
}

type S2 struct {
	x: **struct {
		p1: i64,
		p2: i64
	},
	y: fn() i64
}

fn more_struct() {
    s: S;
    psx := &&&s.x;
    psx.p2 = bad();

    new_sx : struct{ p1: i64, p2: i64 };
    new_sx.p2 = 3;

    ^^^psx = new_sx;

    return s.x.p2;
}

fn testDoubleDeref() {
    p: point;
    p.y = 3;

    q := &p;
    q1 := ^q;
    q2 := ^q;

    return p.y + q1.y - q2.y;
}

fn testA9Helper() {
    a9 := bad();
    a9_p := &&&a9;
    ^^^a9_p = 3;
    return ^^^a9_p;
}

fn testA9() {
    return testA9Helper();
}

fn testBug1() {
    p: point;
    p.y = 123;

    q := &&p;
    qq1 := ^q;
    qq1.y = 3;

    assert(p.y == 3);
    assert(q.y == 3);
    assert(qq1.y == 3);
}

fn deref(i: *i64) {
    return ^i;
}

type point struct {
    x: i64,
    y: i64
}

fn point_get_x(p: point) { return p.x; }

fn point_id(p: point) { return p; }

fn testNestedCall() {
    p: point;
    p.x = 3;
    p.y = bad();
    return point_get_x(point_id(point_id(point_id(point_id(point_id(point_id(p)))))));
}

fn testDerefParam() {
    return deref(&3);
}

type S struct {
	x: struct {
		p1: i64,
		p2: i64
	},
	y: i64
}

fn fib(n: i32) i32 {
    if n == 0 { return 1; }
    if n == 1 { return 1; }
    return fib(n - 1) + fib(n - 2);
}

fn testStruct1() {
	f: S;
	f.y = 3;
	return f.y;
}

fn testStruct2() {
	f: S;
	f.y = 3;
	return ^^&&(f.y);
}

fn bad() i64 { return 999; }

fn a5_fn() {
    f := fn() i64 { return 3; };
    p := &f;
    return (^p)();
}

fn bar() i64 {
    return 3;
}

fn inc(n: i64) {
    return n + 1;
}

fn apply(a: fn(n: i64) i64, b: i64) {
    return a(b);
}

fn apply_overboard(a: fn(n: i64) i64, b: i64) {
    return fn(f: fn(n: i64) i64, g: i64) {
        return f(g);
    }(a, b);
}

fn test25() {
    type Foo struct {
        value: i32,
        bar: *Bar
    }

    type Bar struct {
        value: i32,
        baz: *Baz
    }

    type Baz struct {
        value: i32,
        qux: *Qux
    }

    type Qux struct {
        value: **i64
    }

    foo: Foo;
    bar: Bar;
    baz: Baz;
    qux: Qux;

    foo.value = 111;
    bar.value = 222;
    baz.value = 333;
    qux.value = &&444;

    foo.bar = &bar;
    bar.baz = &baz;
    baz.qux = &qux;

    baz2: Baz;
    baz2.value = 9876;
    baz2.qux = &qux;

    ^^foo.bar.baz.qux.value = 443;

    assert(^^foo.bar.baz.qux.value == 443);
    assert(^^bar.baz.qux.value == 443);
    assert(^^baz.qux.value == 443);
    assert(^^qux.value == 443);

    ^^bar.baz.qux.value = 442;
    assert(^^foo.bar.baz.qux.value == 442);
    assert(^^bar.baz.qux.value == 442);
    assert(^^baz.qux.value == 442);
    assert(^^qux.value == 442);
}

fn test23() {
    type Foo struct {
        value: i32,
        bar: *Bar
    }

    type Bar struct {
        value: i32,
        baz: Baz
    }

    type Baz struct {
        value: i32,
        qux: **Qux
    }

    type Qux struct {
        value: **i32,
        f: *fn() i32
    }

    foo: Foo;
    bar: Bar;
    baz: Baz;
    qux: Qux;

    foo.value = 111;
    bar.value = 222;
    baz.value = 333;
    qux.value = &&444;
    qux.f = &fn() { return 123; };

    baz.qux = &&qux;
    bar.baz = baz;
    foo.bar = &bar;

    fn setComplexBarFromParam(bar: Bar) {
        ^^bar.baz.qux.value = 3;
    }
    setComplexBarFromParam(bar);

    assert((^bar.baz.qux.f)() == 123);

    assert(3 == ^^foo.bar.baz.qux.value);
    assert(3 == ^^bar.baz.qux.value);
    assert(3 == ^^baz.qux.value);
    assert(3 == ^^qux.value);

    return 0;
}

fn testBuffer() {
    type foo struct {
        x: i32,
        y: i32
    }

    b := buffer.make!(foo)(0);

    f: foo;
    f.x = 3;
    f.y = 4;

    buffer.set(&b, 200, f);

    assert(buffer.get(&b, 200).x == 3);
    assert(buffer.get(&b, 200).y == 4);

    buffer.release(b);
}

fn testAnySimple1() {
    type ParamData struct {
        name:  []i8,
        _type: *TypeInfo
    }

    type StructData struct {
        params: []ParamData
    }

    type UnionData struct {
        params: []ParamData
    }

    type FnData struct {
        params:     []ParamData,
        returnType: *TypeInfo
    }

    type PointerData struct {
        underlyingType: *TypeInfo
    }

    type ArrayData struct {
        elementType: *TypeInfo
    }

    type TypeInfo union {
        NONE:          none,
        INT_LITERAL:   i64,
        I8:            none,
        I32:           none,
        I64:           none,
        FLOAT_LITERAL: f64,
        BOOLEAN:       none,
        F32:           none,
        F64:           none,
        FN:            FnData,
        STRUCT:        StructData,
        POINTER:       PointerData,
        UNION:         UnionData,
        ARRAY:         ArrayData,
    }

    type Any struct {
        _type:  TypeInfo,
        value:  *none
    }

    a : Any = {
        _type: {
            STRUCT: {
                params: []ParamData{
                    {
                        name: "fuck",
                        _type: &{I8: {}},
                    }
                }
            }
        },
        value: cast(*none) &77
    };

    assert(a._type.STRUCT.params[0]._type.tag == 3);
    assert(a._type.STRUCT.params[0].name[3] == "duck"[3]);
}

fn someCheck() { return true; }

#if someCheck() {
    #import "test2";

    topLevel := id(123);
}

fn testIteration(t: !T) {
    it := t|iter;
    while !it.empty {
        io.println(it.front);
        &it|popFront;
    }
}

type String []i8
#impl fn iter(s: String) {
    type iterator struct {
        empty: bool,
        front: i8 = 0,
        target: []i8,
        index: i64,
        until: i64
    }

    #impl fn popFront(it: *iterator) {
        it.index += 1;
        if it.index >= it.until {
            it.empty = true;
        }
        else {
            it.front = it.target[it.index];
        }
    }

    it: iterator = {
        empty: s.count == 0,
        target: s,
        index: 0,
        until: s.count
    };
    if !it.empty {
        it.front = it.target[0];
    }

    return it;
}

type I64 i64
#impl fn iter(i: I64) {
    type iterator struct {
        empty: bool,
        front: i64,
        until: i64
    }

    #impl fn popFront(i: *iterator) {
        i.front += 1;
        if i.front >= i.until { i.empty = true; }
    }

    s: iterator = {
        empty: i == 0,
        front: 0,
        until: i
    };

    return s;
}

