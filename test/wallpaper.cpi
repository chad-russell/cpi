#import "png";
#import "iter";
#import "random";
#import "mem";

width: i32 = 2880;
height: i32 = 1800;

type Color struct {
    r: i8,
    g: i8,
    b: i8
}

fn fill_rect(pixels: [][]i8, x: i64, y: i64, w: i64, h: i64, color: Color) {
  for row: iter.range(y, y + h) {
    for col: iter.range(x, x + w) {
        pixels[row][col * 3] = color.r;
        pixels[row][col * 3 + 1] = color.g;
        pixels[row][col * 3 + 2] = color.b;
    }
  }
}

fn fill_square(pixels: [][]i8, x: i64, y: i64, d: i64, color: Color) {
    fill_rect(pixels, x, y, d, d, color);
}

fn write_png_file(filename: []i8) {
  #import "io";

  fp := io.fopen(filename|io.cstr, "wb"|io.cstr);
  pngCtx := png.png_create_write_struct(png.PNG_LIBPNG_VER_STRING|io.cstr, nil, nil, nil);
  info := png.png_create_info_struct(pngCtx);

  png.png_init_io(pngCtx, fp);

  -- Output is 8bit depth, RGBA format.
  png.png_set_IHDR(pngCtx,
    info,
    width, height,
    8,
    png.PNG_COLOR_TYPE_RGB,
    png.PNG_INTERLACE_NONE,
    png.PNG_COMPRESSION_TYPE_DEFAULT,
    png.PNG_FILTER_TYPE_DEFAULT);

  png.png_write_info(pngCtx, info);

  background : Color = {54, 110, 122};
  cubeBackground: Color = {35, 49, 62};

  blue: Color = {69, 133, 212};
  red: Color = {239, 41, 35};
  orange: Color = {230, 126, 34};
  yellow: Color = {246, 201, 53};
  green: Color = {57, 202, 116};
  white: Color = {250, 250, 250};

  faceColors := []{blue, red, orange, yellow, green, white};

  -- todo(chad): hack to get around parser issue
  type i8Array []i8

  pixels: [][]i8;
  pixels.count = cast() height;
  pixels.data = mem.alloc!(i8Array)(pixels.count);

  for row: iter.range(0, cast() height) {
    pixelRow: []i8;
    pixelRow.count = 3 * cast(i64) width;
    pixelRow.data = mem.alloc!(i8)(pixelRow.count);
    pixels[row] = pixelRow;
  }

  outerMargin := 25;
  innerMargin := 12;
  miniCubeSize := 138;
  cubeSize := outerMargin * 2 + innerMargin * 2 + miniCubeSize * 3;

  -- background
  fill_rect(pixels, 0, 0, cast() width, cast() height, background);

  cubeX := (cast() width - cubeSize) / 2;
  cubeY := (cast() height - cubeSize) / 2;

  -- cube background
  fill_square(pixels, cubeX, cubeY, cubeSize, cubeBackground);

  random.seed();

  -- squares
  sqY := cubeY + outerMargin;
  for sqRow: iter.range(0, 3) {
    sqX := cubeX + outerMargin;

    for sqCol: iter.range(0, 3) {
        fill_square(pixels, sqX, sqY, miniCubeSize, random.fromArray(faceColors));
        sqX += miniCubeSize + innerMargin;
    }

    sqY += miniCubeSize + innerMargin;
  }

  for row: iter.range(0, cast() height) {
    png.png_write_row(pngCtx, pixels[row].data);
  }

  png.png_write_end(pngCtx, nil);

  -- cleanup
  for r: pixels {
    mem.free(r.data);
  }
  mem.free(pixels.data);
  io.fclose(fp);
}

fn main() {
  write_png_file("/Users/chadrussell/Pictures/cubeBackground.png");

  return 0;
}
