fn foo() {
    ret bar;
}

fn main() {
    f := fn() {
        ret fn() {
            ret foo;
        };
    };

    assert(3 == f()()()());

    assert(apply(inc, 1) + apply_overboard(inc, 0) == 3);

    a3 := ^^^^^^&&&^&&&&^&^^&&3;
    assert(a3 == 3);

    a4_helper := &&&&^&&&&&&&&&a3;
    a4 := ^^^^^^^^^^^^a4_helper;
    assert(a4 == 3);

    a5 := a5_fn();
    assert(a5 == 3);

    a6 := (^^&&a5_fn)();
    assert(a6 == 3);

    a7 := (^&(fn() i64 { ret 3; }))();
    assert(a7 == 3);

    a8_helper1 := &&bad;
    a8_helper2 := &&bar;
    ^a8_helper1 = ^a8_helper2;
    a8 := (^^a8_helper1)();
    assert(a8 == 3);

    a9 := testA9();
    assert(a9 == 3);

    a10 := testStruct1();
    assert(a10 == 3);

    a11 := testStruct2();
    assert(a11 == 3);

    a12 := testNestedCall();
    assert(a12 == 3);

    a13 := testDerefParam();
    assert(a13 == 3);

    a14 := testBug1();
    assert(a14 == 3);

    a15 := testDoubleDeref();
    assert(a15 == 3);

    a16 := more_struct();
    assert(a16 == 3);

    a17 := test_S2_stuff();
    assert(a17 == 3);

    a18 := testSetFromParam();
    assert(a18 == 3);

    a19 := testSetter();
    assert(a19 == 3);

    a20 := testLinkedList();
    assert(a20 == 3);

    a21 := testWeirdLinkedList();
    assert(a21 == 3);

    a22 := testMoreDotsAndDerefs();
    assert(a22 == 3);

    ret 0;
}

type pair struct {
    x: i64,
    y: i64
}

fn testMoreDotsAndDerefs() {
    p: pair;
    p.x = 1;
    p.y = 2;

    ret (^^&&p).x + ^^&&(p.y);
}

type weirdLinkedList struct {
    value: i64,
    next: ***weirdLinkedList
}

fn testWeirdLinkedList() {
    l: weirdLinkedList;
    l.value = 999;
    l.next = &&&l;

    l.next.next.next.value = 3;

    ret l.next.next.next.next.value;
}

type linkedList struct {
    value: i64,
    next: *linkedList
}

fn testLinkedList() {
    l: linkedList;
    l.value = 3;
    l.next = &l;

    ret l.next.next.next.next.value;
}

fn set_y(p: *point, y: i64) {
    p.y = y;
    ret y;
}

fn testSetter() {
    p: point;
    p.x = bad();
    p.y = bad();
    set_y(^&&p, 3);
    ret p.y;
}

fn testSetFromParam() {
    a : i64 = 999;
    set(&a);
    ret a;
}

fn set(n: *i64) {
    ^n = 3;
    ret 999;
}

fn test_S2_stuff() {
    s: S2;
    sx: struct{p1: i64, p2: i64};

    sx.p1 = 999;
    sx.p2 = 2;

    s.x = &&sx;

    ret s.x.p2 + 1;
}

type S2 struct {
	x: **struct {
		p1: i64,
		p2: i64
	},
	y: fn() i64
}

fn more_struct() {
    s: S;
    psx := &&&s.x;
    psx.p2 = bad();

    new_sx : struct{ p1: i64, p2: i64 };
    new_sx.p2 = 3;

    ^^^psx = new_sx;

    ret s.x.p2;
}

fn testDoubleDeref() {
    p: point;
    p.y = 3;

    q := &p;
    q1 := ^q;
    q2 := ^q;

    ret p.y + q1.y - q2.y;
}

fn testA9Helper() {
    a9 := bad();
    a9_p := &&&a9;
    ^^^a9_p = 3;
    ret ^^^a9_p;
}

fn testA9() {
    ret testA9Helper();
}

fn testBug1() {
    p: point;
    p.y = 123;

    q := &&p;
    qq1 := ^q;
    qq1.y = 3;

    -- todo(chad): once we have assert, assert that p.y and q.y are also 13
    ; -- todo(chad): also, get rid of this dumb thing where comments have to have semicolons... :(
    ;
    ret qq1.y;
}

fn deref(i: *i64) {
    ret ^i;
}

type point struct {
    x: i64,
    y: i64
}

fn point_get_x(p: point) { ret p.y; }

fn point_id(p: point) { ret p; }

fn testNestedCall() {
    p: point;
    p.y = 3;
    ret point_get_x(point_id(point_id(point_id(point_id(point_id(point_id(p)))))));
}

fn testDerefParam() {
    ret deref(&3);
}

type S struct {
	x: struct {
		p1: i64,
		p2: i64
	},
	y: i64
}

fn testStruct1() {
	f: S;
	f.y = 3;
	ret ^^&&(f.y);
}

fn testStruct2() {
	f: S;
	f.y = 3;
	ret f.y;
}

fn bad() i64 { ret 999; }

fn a5_fn() {
    f := fn() i64 { ret 3; };
    p := &f;
    ret (^p)();
}

fn bar() i64 {
    ret 3;
}

fn inc(n: i64) {
    ret n + 1;
}

fn apply(a: fn(n: i64) i64, b: i64) {
    ret a(b);
}

fn apply_overboard(a: fn(n: i64) i64, b: i64) {
    ret fn(f: fn(n: i64) i64, g: i64) {
        ret f(g);
    }(a, b);
}
