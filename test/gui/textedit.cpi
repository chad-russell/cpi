#import "gui/gui";
#import "gui/slider";
#import "se";
#import "sdl";
#import "buffer": buf;
#import "iter";
#import "math";
#import "cairo";
#import "harfbuzz": hb;
#import "freetype": ft;
#import "string";
#import "io";

TEXT_UPDATE := "text_update";

FONT_SIZE : i32 = 20;

sliderBackground: gui.Color = {0.4235, 0.4275, 0.4117};
sliderForeground: gui.Color = {0.8686, 0.7686, 0.7647};

fn init() {
    context.tc.eb = se.editor_buffer_create(80);

    context.tc.glyphCache = buf.make!(CachedGlyph)();
    context.tc.lineCache = buf.make!(CachedLine)();

    loadFonts();

    rect: gui.Rect!(f64) = {0, 0, 1, 0.075};
    makeGlobalUndoSlider(rect);

    rect = {0, 0.075, 1, 0.075};
    makeUndoSlider(rect);

    formRect: gui.Rect!(f64) = {
        x:      0,
        y:      0.15,
        width:  1.0,
        height: 0.85
    };

    textEditorId := make(formRect);
    -- makeCursor(textEditorId);

    return textEditorId;
}

fn makeUndoSlider(rect: gui.Rect!(f64)) {
    sl := slider.create(rect, 50, sliderBackground, sliderForeground);

    sl|gui.addReceiver(
        TEXT_UPDATE,
        fn(formId: i64, formData: *slider.SliderFormData, messageData: *none) {
            -- set the max and the current
            formData.max = context.tc.eb.undo.length;
            formData.current = ^context.tc.eb.undoIdx;
            formId|gui.setFormNeedsDraw;
        }
    );

    sl|gui.addReceiver(
        slider.VALUE_UPDATE,
        fn(formId: i64, formData: *slider.SliderFormData, messageData: *gui.MouseMessageData) {
            gui.broadcast(TEXT_UPDATE);
            se.editor_buffer_undo(context.tc.eb, formData.current);
        }
    );
}

fn makeGlobalUndoSlider(rect: gui.Rect!(f64)) {
    sl := slider.create(rect, 50, sliderBackground, sliderForeground);

    sl|gui.addReceiver(
        TEXT_UPDATE,
        fn(formId: i64, formData: *slider.SliderFormData, messageData: *none) {
            -- set the max and the current
            formData.max = context.tc.eb.globalUndo.length;
            formData.current = ^context.tc.eb.globalUndoIdx;
            formId|gui.setFormNeedsDraw;
        }
    );

    sl|gui.addReceiver(
        slider.VALUE_UPDATE,
        fn(formId: i64, formData: *slider.SliderFormData, messageData: *gui.MouseMessageData) {
            gui.broadcast(TEXT_UPDATE);
            se.editor_buffer_global_undo(context.tc.eb, formData.current);
        }
    );
}

type CachedGlyph struct {
    codepoint: i32,
    extents: cairo.GlyphExtents,
    pattern: *cairo.Pattern
}

type CachedLine struct {
    low: f64,
    high: f64,
    glyphs: *buf.Buffer!(gui.Rect!(f64))
}

#context tc: struct {
    eb: *se.EditorBuffer,

    font: []i8,

    glyphCache: *buf.Buffer!(CachedGlyph),
    lineCache: *buf.Buffer!(CachedLine),
}

#context hb: struct {
    font: *hb.Font,
    buffer: *hb.Buffer = nil,
}

fn cacheGlyph(codepoint: i32) {
    cairoGlyph := cairo.cairo_glyph_allocate(1);
    defer { cairo.cairo_glyph_free(cairoGlyph); }

    cairoGlyph.index = cast() codepoint;
    cairoGlyph.x = 0;
    cairoGlyph.y = 0;

    cached: CachedGlyph;
    cached.codepoint = codepoint;

    glyphSurface := cairo.cairo_image_surface_create(
            cairo.FORMAT_RGB24,
            cast() 500,
            cast() 500);
    cached.pattern = cairo.cairo_pattern_create_for_surface(glyphSurface);

    -- Scale cairo to use screen resolution
    cairo.cairo_surface_set_device_scale(glyphSurface, context.sdl.xScale, context.sdl.yScale);

    -- Get Cairo context from Cairo surface
    glyphContext := cairo.cairo_create(glyphSurface);

    cairo.cairo_set_font_face(glyphContext, context.cairo.font);
    cairo.cairo_set_font_size(glyphContext, cast() FONT_SIZE);

    cairo.cairo_glyph_extents(glyphContext, cairoGlyph, 1, &cached.extents);

    -- clear the background
    cairo.cairo_set_source_rgb(glyphContext, 0.1739, 0.1867, 0.1433);
    cairo.cairo_rectangle(glyphContext,
        0, 0,
        cast() 40, cast() 40);
    cairo.cairo_fill(glyphContext);

    cairo.cairo_set_source_rgb(glyphContext, 0.965, 0.965, 0.941);
    cairo.cairo_translate(glyphContext, 0, -cached.extents.yBearing);
    cairo.cairo_show_glyphs(glyphContext, cairoGlyph, 1);

    &context.tc.glyphCache|:append(cached);
    return cached;
}

fn findGlyph(codepoint: i32) CachedGlyph {
    for g: context.tc.glyphCache.buf {
        if g.codepoint == codepoint {
            return g;
        }
    }

    return cacheGlyph(codepoint);
}

fn drawLine(formId: i64, formData: *TextEditFormData, line: i64, startLine: i64) {
    form := &context.forms.buf[formId];

    -- Reset HarfBuzz buffer
    hb.hb_buffer_reset(context.hb.buffer);

    -- Set buffer to LTR direction, common script and default language
    hb.hb_buffer_set_direction(context.hb.buffer, hb.HB_DIRECTION_LTR);
    hb.hb_buffer_set_script(context.hb.buffer, hb.HB_SCRIPT_COMMON);
    hb.hb_buffer_set_language(context.hb.buffer, hb.hb_language_get_default());

    -- Add text and lay it out
    lastChar := se.editor_buffer_get_line_length(context.tc.eb, line);

    text := se.editor_buffer_get_text_between_points(context.tc.eb, line, 0, line, lastChar);
    defer { se.editor_buffer_free_buf(text); }

    hb.hb_buffer_add_utf8(context.hb.buffer, text.bytes, -1, 0, -1);
    hb.hb_shape(context.hb.font, context.hb.buffer, nil, 0);

    -- Get buffer data
    glyphCount := hb.hb_buffer_get_length(context.hb.buffer);
    glyphInfo := hb.hb_buffer_get_glyph_infos(context.hb.buffer, nil);
    glyphPos := hb.hb_buffer_get_glyph_positions(context.hb.buffer, nil);

    if glyphCount == 0 { return; }

    -- try to find the cachedLine. If we can't make a new one
    if context.tc.lineCache.buf.count <= line {
        cl: CachedLine = {cast() (context.sdl.windowHeight + 10), 0, buf.make!(gui.Rect!(f64))()};
        &context.tc.lineCache|:set(line, cl);
        context.tc.lineCache.buf.count = line + 1;
    }
    cl := &context.tc.lineCache.buf[line];
    cl.glyphs.buf.count = 0;

    x: f64 = 5;
    y: f64 = cast() (cast() FONT_SIZE * ((line - startLine) + 1));

    for i: iter.until(cast() glyphCount) {
        found := findGlyph(cast() (glyphInfo + i).codepoint);

        cairo.cairo_save(form.layer.context);
        cairo.cairo_translate(form.layer.context, x, y + found.extents.yBearing);

        cairo.cairo_set_source(form.layer.context, found.pattern);
        cairo.cairo_rectangle(form.layer.context,
            found.extents.xBearing,
            0,
            cast() (found.extents.width + 1),
            cast() (found.extents.height + 1));
        cairo.cairo_fill(form.layer.context);

        if y + found.extents.yBearing < cl.low {
            cl.low = y + found.extents.yBearing;
        }
        if y + found.extents.yBearing + cast() (found.extents.height + 1) > cl.high {
            cl.high = y + found.extents.yBearing + found.extents.height + 1;
        }

        &cl.glyphs|:set(i, {
            x + found.extents.xBearing,
            y + found.extents.yBearing,
            cast() (found.extents.width + 1),
            cast() (found.extents.height + 1)
        });

        cairo.cairo_restore(form.layer.context);

        x += found.extents.xAdvance;
    }
}

-- todo(chad): make highlights not a pointer
type TextEditFormData struct {
    highlights: *buf.Buffer!(gui.Rect!(f64)),

    color: gui.Color = {0, 0, 0, 0},
    setColor := false
}

fn cursorIterator() {
    type CursorIterator struct{
        current: i64,
        count: i64
    }

    #attr(CursorIterator) {
        fn empty(ci: CursorIterator) {
            return ci.current >= ci.count;
        }

        fn front(ci: CursorIterator) {
            return ^(context.tc.eb.currentScreen.cursorInfos.buf + ci.current);
        }

        fn popFront(ci: *CursorIterator) {
            ci.current += 1;
        }
    }

    return cast(CursorIterator) { 0, context.tc.eb.currentScreen.cursorInfos.length };
}

fn makeCursor(parentId: i64) {
    fn draw(formId: i64, formData: *i64, messageData: *none) {
        form := &context.forms.buf[formId];

        for cursorInfo: cursorIterator() {
            cursorRect: gui.Rect!(f64);
            hasPrevious := false;

            parent := context.forms.buf[^formData];

            width: f64 = 20.0;

            if context.tc.lineCache.buf.count > cursorInfo.row {
                cl := context.tc.lineCache.buf[cursorInfo.row];
                if cl.glyphs.buf.count >= cursorInfo.col {
                    hasPrevious = true;

                    g := cl.glyphs.buf[cursorInfo.col - 1];
                    form.rect = {parent.rect.x + g.x + g.width, parent.rect.y + cl.low - 1, width, cast() FONT_SIZE};
                }
            }
            if !hasPrevious {
                form.rect = {parent.rect.x, parent.rect.y + cast() (cast() cursorInfo.row * FONT_SIZE), width, cast() FONT_SIZE};
            }

            #import "time";
            elapsedSeconds := cast(f64) context.elapsed / cast() time.CLOCKS_PER_SEC;

            alpha := (math.sin(elapsedSeconds * 15) + 1.0) / 2.0;

            cairo.cairo_set_source_rgba(form.layer.context, 0.9, 0.9, 0.9, alpha);
            cairo.cairo_set_line_width(form.layer.context, 10);
            cairo.cairo_move_to(form.layer.context, 0, 0);
            cairo.cairo_line_to(form.layer.context, 0, 100);
            cairo.cairo_stroke(form.layer.context);
        }
    }

    formId := gui.makeFormNonScaled({0, 0, 1.5, cast(f64) FONT_SIZE}, parentId, true);

    formId|gui.addReceiver(gui.DRAW, draw);

    &context.animators|:append(formId);

    return formId;
}

fn loadFonts() {
    -- context.tc.font = "/System/Library/Fonts/Apple Color Emoji.ttc";
    -- context.tc.font = "/Users/chadrussell/Projects/text/Noto-unhinted/NotoColorEmoji.ttf";
    -- context.tc.font = "/Users/chadrussell/Projects/text/emojione-apple.ttc";
    -- context.tc.font = "/Users/chadrussell/Library/Fonts/Roboto-Light.ttf";
    context.tc.font = "/Library/Fonts/Inconsolata.otf";
    -- context.tc.font = "/Users/chadrussell/Projects/text/JFWilwod.ttf";

    -- context.tc.text = buf.from("Hello");
    -- context.tc.text = buf.from("🙈");

    -- For CAIRO, load using FreeType
    ftLibrary: ft.Library;
    ft.FT_Init_FreeType(&ftLibrary);
    ftFace: ft.Face;
    err := ft.FT_New_Face(ftLibrary, context.tc.font|string.cstr, 0, &ftFace);
    if err != 0 {
        io.println("error creating freetype font face");
        panic();
    }
    context.cairo.font = cairo.cairo_ft_font_face_create_for_ft_face(ftFace, 0);

    -- For Harfbuzz, load using OpenType (HarfBuzz FT does not support bitmap font)
    blob := hb.hb_blob_create_from_file(context.tc.font|string.cstr);
    face := hb.hb_face_create(blob, 0);
    context.hb.font = hb.hb_font_create(face);
    hb.hb_ot_font_set_funcs(context.hb.font);
    hb.hb_font_set_scale(context.hb.font, FONT_SIZE * 64, FONT_SIZE * 64);

    context.hb.buffer = hb.hb_buffer_create();
}

fn make(rect: gui.Rect!(f64)) {
    #import "random";
    random.seed();

    -- todo(chad): actually take the messageData rect into account
    fn draw(formId: i64, formData: *TextEditFormData, messageData: *gui.Rect!(f64)) {
        form := &context.forms.buf[formId];

        -- clear
        localRect := {0, 0, form.rect.width, form.rect.height};
        formId|gui.drawRect(localRect, 0.1739, 0.1867, 0.1433);

        startLine := cast(i64) messageData.y / cast(i64) FONT_SIZE;
        endLine := startLine + (cast(i64) messageData.height + 1) / cast(i64) FONT_SIZE;

        if startLine < 0 { startLine = 0; }

        maxLine := se.editor_buffer_get_line_count(context.tc.eb);
        if endLine > maxLine {
            endLine = maxLine;
        }

        for line: iter.range(startLine, endLine) {
            drawLine(formId, formData, line, startLine);
        }

        for highlight: formData.highlights.buf {
            formId|gui.drawRect(highlight, 0, 1, 0);
        }

        formData.highlights.buf.count = 0;
    }

    fn mousemove(formId: i64, formData: *TextEditFormData, messageData: *gui.MouseMessageData) {
        return;

        form := &context.forms.buf[formId];

        localX := messageData.x - form.rect.x;
        localY := messageData.y - form.rect.y;

        -- Mouse cursor
        -- cursor: gui.Rect!(f64) = {cast() (localX - 10), cast() (localY - 10), 20, 20};
        -- formData.highlights|:append(cursor);
        -- gui.setFormNeedsDraw(formId);

        -- y relative to the form
        line := cast(i64) (cast() localY / FONT_SIZE);

        if line >= 0 and line < context.tc.lineCache.buf.count {
            cl := context.tc.lineCache.buf[line];
            for g, i: cl.glyphs.buf {
                boundingLeft: gui.Rect!(f64) = {form.rect.x + g.x, form.rect.y + cl.low - 1, g.width/2, cl.high - cl.low};
                boundingRight: gui.Rect!(f64) = {form.rect.x + g.x + g.width/2, form.rect.y + cl.low - 1, g.width/2, cl.high - cl.low};

                if boundingLeft|:contains(messageData.x, messageData.y) {
                    -- try to draw *after* the previous glyph
                    if i > 0 {
                        clG := cl.glyphs.buf[i - 1];
                        cursorRect: gui.Rect!(f64) = {clG.x + clG.width, cl.low - 1, 2, cl.high - cl.low};

                        formData.highlights|:append(cursorRect);
                        gui.setFormNeedsDraw(formId);
                    }
                    else {
                        cursorRect: gui.Rect!(f64) = {cl.glyphs.buf[0].x, cl.low - 1, 2, cl.high - cl.low};

                        formData.highlights|:append(cursorRect);
                        gui.setFormNeedsDraw(formId);
                    }
                }
                else if boundingRight|:contains(messageData.x, messageData.y) {
                        cursorRect: gui.Rect!(f64) = {g.x + g.width, cl.low - 1, 2, cl.high - cl.low};

                        formData.highlights|:append(cursorRect);
                        gui.setFormNeedsDraw(formId);
                }
            }

            -- entire line
            -- lineRect: gui.Rect!(f64) = {0, cl.low - 1, cast() context.sdl.windowWidth, cl.high - cl.low + 2};
            -- formData.highlights|:append(lineRect);
        }
    }

    fn keydown(formId: i64, formData: *TextEditFormData, messageData: *gui.KeyboardMessageData) {
        gui.broadcast(TEXT_UPDATE);

        if messageData.scancode == sdl.Key.BACKSPACE {
            se.editor_buffer_set_cursor_is_selection(context.tc.eb, 1);
            se.editor_buffer_set_cursor_pos_relative(context.tc.eb, -1);
            se.editor_buffer_delete(context.tc.eb);
            se.editor_buffer_set_cursor_is_selection(context.tc.eb, 0);
        }
        else if messageData.scancode == sdl.Key.SPACE {
            se.editor_buffer_insert(context.tc.eb, " \0".data);
        }
        else if messageData.scancode == sdl.Key.ENTER {
            se.editor_buffer_insert(context.tc.eb, "\n\0".data);
        }
        else if messageData.scancode == sdl.Key.LEFT {
            se.editor_buffer_set_cursor_pos_relative(context.tc.eb, -1);
        }
        else if messageData.scancode == sdl.Key.RIGHT {
            se.editor_buffer_set_cursor_pos_relative(context.tc.eb, 1);
        }
        else if messageData.scancode == sdl.Key.UP {
            for ci: iter.withIndex(cursorIterator()) {
                se.editor_buffer_set_cursor_point_for_cursor_index(context.tc.eb, ci.index, ci.it.row - 1, ci.it.col);
            }
        }
        else if messageData.scancode == sdl.Key.DOWN {
            for ci: iter.withIndex(cursorIterator()) {
                se.editor_buffer_set_cursor_point_for_cursor_index(context.tc.eb, ci.index, ci.it.row + 1, ci.it.col);
            }
        }
        else if messageData.scancode|:isalpha {
            se.editor_buffer_insert(context.tc.eb, :charsFor(messageData.scancode));
        }
    }

    fn textUpdate(formId: i64, formData: *TextEditFormData, messageData: *none) {
        formId|gui.setFormNeedsDraw;
    }

    formData: TextEditFormData;
    formData.highlights = buf.make!(gui.Rect!(f64))();

    formId := gui.makeForm(rect, formData, ownLayer: true);

    formId|gui.addReceiver(gui.DRAW, draw);
    formId|gui.addReceiver(gui.MOUSEMOVE, mousemove);
    formId|gui.addReceiver(gui.KEYDOWN, keydown);
    formId|gui.addReceiver(TEXT_UPDATE, textUpdate);

    &context.mousers|:append(formId);
    &context.texters|:append(formId);

    return formId;
}
