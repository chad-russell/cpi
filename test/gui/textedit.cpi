#import "gui/gui";
#import "gui/slider";
#import "gui/scroll";
#import "se";
#import "sdl";
#import "buffer": buf;
#import "iter";
#import "math";
#import "cairo";
#import "harfbuzz": hb;
#import "freetype": ft;
#import "string";
#import "io";
#import "optional";

TEXT_UPDATE := "text_update";

FONT_SIZE : i32 = 20;

sliderBackground: gui.Color = {0.4235, 0.4275, 0.4117};
sliderForeground: gui.Color = {0.8686, 0.7686, 0.7647};

fn init() {
    context.tc.eb = se.editor_buffer_create(80);

    loadFonts();

    rect: gui.Rect = {0, 0, 1, 0.075};
    makeGlobalUndoSlider(rect);

    rect = {0, 0.075, 1, 0.075};
    makeUndoSlider(rect);

    formRect: gui.Rect = {
        x:      0,
        y:      0.15,
        width:  1.0,
        height: 0.85
    };

    textEditorId := make(formRect);
    textEditor := &context.forms.buf[textEditorId];

    cursorId := makeCursor(textEditor.data, textEditorId);
    cursor := &context.forms.buf[cursorId];

    scrollData := scroll.takeover(textEditor.rect, textEditorId);

    (cast(*CursorFormData) cursor.data).parentRect = &scrollData.effectiveRect;

    stressTest();

    return textEditorId;
}

fn stressTest() {
    for i: iter.until(2000) {
        se.editor_buffer_insert(context.tc.eb, "abcdefghijklmnopqrstuvwxyz\n......\n\0".data);
    }
}

fn makeUndoSlider(rect: gui.Rect) {
    sl := slider.create(rect, 50, sliderBackground, sliderForeground);

    sl|gui.addReceiver(
        TEXT_UPDATE,
        fn(formId: i64, formData: *slider.SliderFormData, messageData: *none) {
            -- set the max and the current
            formData.max = context.tc.eb.undo.length;
            formData.current = ^context.tc.eb.undoIdx;
            formId|gui.setFormNeedsDraw;
        }
    );

    sl|gui.addReceiver(
        slider.VALUE_UPDATE,
        fn(formId: i64, formData: *slider.SliderFormData, messageData: *gui.MouseMessageData) {
            gui.broadcast(TEXT_UPDATE);
            se.editor_buffer_undo(context.tc.eb, formData.current);
        }
    );
}

fn makeGlobalUndoSlider(rect: gui.Rect) {
    sl := slider.create(rect, 50, sliderBackground, sliderForeground);

    sl|gui.addReceiver(
        TEXT_UPDATE,
        fn(formId: i64, formData: *slider.SliderFormData, messageData: *none) {
            -- set the max and the current
            formData.max = context.tc.eb.globalUndo.length;
            formData.current = ^context.tc.eb.globalUndoIdx;
            formId|gui.setFormNeedsDraw;
        }
    );

    sl|gui.addReceiver(
        slider.VALUE_UPDATE,
        fn(formId: i64, formData: *slider.SliderFormData, messageData: *gui.MouseMessageData) {
            gui.broadcast(TEXT_UPDATE);
            se.editor_buffer_global_undo(context.tc.eb, formData.current);
        }
    );
}

type CachedGlyph struct {
    codepoint: i32,
    extents: cairo.GlyphExtents,
    pattern: *cairo.Pattern
}

type CachedLine struct {
    low: f64,
    high: f64,
    glyphs: *buf.Buffer!(gui.Rect)
}

#context tc: struct {
    eb: *se.EditorBuffer,
}

#context hb: struct {
    font: *hb.Font,
    emojiFont: *hb.Font,
    buffer: *hb.Buffer = nil,
}

fn cacheGlyph(formData: *TextEditFormData, codepoint: i32, font: *cairo.FontFace) {
    cairoGlyph := cairo.cairo_glyph_allocate(1);
    defer { cairo.cairo_glyph_free(cairoGlyph); }

    cairoGlyph.index = cast() codepoint;
    cairoGlyph.x = 0;
    cairoGlyph.y = 0;

    cached: CachedGlyph;
    cached.codepoint = codepoint;

    glyphSurface := cairo.cairo_image_surface_create(
            cairo.FORMAT_RGB24,
            cast() 500,
            cast() 500);
    cached.pattern = cairo.cairo_pattern_create_for_surface(glyphSurface);

    -- Scale cairo to use screen resolution
    cairo.cairo_surface_set_device_scale(glyphSurface, context.sdl.xScale, context.sdl.yScale);

    -- Get Cairo context from Cairo surface
    glyphContext := cairo.cairo_create(glyphSurface);

    cairo.cairo_set_font_face(glyphContext, font);
    cairo.cairo_set_font_size(glyphContext, cast() FONT_SIZE);

    cairo.cairo_glyph_extents(glyphContext, cairoGlyph, 1, &cached.extents);

    -- clear the background
    cairo.cairo_set_source_rgb(glyphContext, 0.1739, 0.1867, 0.1433);
    cairo.cairo_rectangle(glyphContext,
        0, 0,
        cast() 40, cast() 40);
    cairo.cairo_fill(glyphContext);

    cairo.cairo_set_source_rgb(glyphContext, 0.965, 0.965, 0.941);
    cairo.cairo_translate(glyphContext, 0, -cached.extents.yBearing);
    cairo.cairo_show_glyphs(glyphContext, cairoGlyph, 1);

    &formData.glyphCache|:append(cached);
    return cached;
}

fn findGlyph(formData: *TextEditFormData, codepoint: i32, font: *cairo.FontFace) CachedGlyph {
    for g: formData.glyphCache.buf {
        if g.codepoint == codepoint {
            return g;
        }
    }

    return cacheGlyph(formData, codepoint, font);
}

fn bytesInCodepointUtf8(firstByte: u8) {
    if (firstByte >= 0 and firstByte <= 191) {
        return 1;
    }

    if (firstByte >= 245) {
        return 1;
    }

    if (firstByte >= 192 and firstByte <= 223) {
        return 2;
    }

    if (firstByte >= 224 and firstByte <= 239) {
        return 3;
    }

    if (firstByte >= 240 and firstByte <= 244) {
        return 4;
    }

    panic();
    return 0;
}

fn tryShapeGlyphs(chars: *i8, font: *hb.Font) {
    -- Reset HarfBuzz buffer
    hb.hb_buffer_reset(context.hb.buffer);

    -- Set buffer to LTR direction, common script and default language
    hb.hb_buffer_set_direction(context.hb.buffer, hb.HB_DIRECTION_LTR);
    hb.hb_buffer_set_script(context.hb.buffer, hb.HB_SCRIPT_COMMON);
    hb.hb_buffer_set_language(context.hb.buffer, hb.hb_language_get_default());

    hb.hb_buffer_add_utf8(context.hb.buffer, chars, -1, 0, -1);
    hb.hb_shape(font, context.hb.buffer, nil, 0);

    glyphInfo := hb.hb_buffer_get_glyph_infos(context.hb.buffer, nil);
    glyphCount := hb.hb_buffer_get_length(context.hb.buffer);

    ch := chars;
    bytes := 0;
    i := 0;
    while i < cast() glyphCount and (glyphInfo + i).codepoint != 0 {
        i += 1;

        incr := bytesInCodepointUtf8(cast() ^ch);
        bytes += incr;
        ch += incr;
    }

    return {glyphs: i, bytes: bytes, glyphInfo: glyphInfo};
}

fn drawLine(formId: i64, formData: *TextEditFormData, line: i64, offset: *gui.Rect) {
    form := &context.forms.buf[formId];

    x: f64 = 5 - offset.x;
    y: f64 = cast() (cast() FONT_SIZE * (line + 1)) - offset.y;

    -- Try to find the cachedLine. Make a new one if it doesn't exist
    if formData.lineCache.buf.count <= line {
        cl: CachedLine = {cast() (context.sdl.windowHeight + 10), 0, buf.make!(gui.Rect)()};

        &formData.lineCache|:set(line, cl);
        formData.lineCache.buf.count = line + 1;
    }
    cl := &formData.lineCache.buf[line];

    startOfLine := se.editor_buffer_character_position_for_point(context.tc.eb, line, 0);
    lineLength := se.editor_buffer_get_line_length(context.tc.eb, line);

    outOffset: i64;
    outBufferLength: i64;
    infos := se.editor_buffer_get_glyph_infos_starting_at_character(context.tc.eb,
                                                        startOfLine,
                                                        &outOffset,
                                                        &outBufferLength);
    bufferIndex := 0;

    for foundIndex: iter.until(lineLength) {
        found: CachedGlyph;
        if outOffset + bufferIndex >= outBufferLength {
            infos = se.editor_buffer_get_glyph_infos_starting_at_character(context.tc.eb,
                                                                startOfLine,
                                                                &outOffset,
                                                                &outBufferLength);
            bufferIndex = 0;
        }
        if outOffset + bufferIndex >= outBufferLength {
            panic();
        }
        found = findGlyph(formData, (infos + outOffset + bufferIndex).codepoint, context.cairo.font);
        startOfLine += 1;
        bufferIndex += 1;

        if x + found.extents.xAdvance >= 0 {
            cairo.cairo_save(form.layer.context);
            cairo.cairo_translate(form.layer.context, x, y + found.extents.yBearing);

            cairo.cairo_set_source(form.layer.context, found.pattern);
            cairo.cairo_rectangle(form.layer.context,
                found.extents.xBearing,
                0,
                cast() (found.extents.width + 1),
                cast() (found.extents.height + 1));
            cairo.cairo_fill(form.layer.context);

            if y + found.extents.yBearing < cl.low {
                cl.low = offset.y + y + found.extents.yBearing;
            }
            if y + found.extents.yBearing + cast() (found.extents.height + 1) > cl.high {
                cl.high = offset.y + y + found.extents.yBearing + found.extents.height + 1;
            }

            &cl.glyphs|:set(foundIndex, {
                offset.x + x + found.extents.xBearing,
                offset.y + y + found.extents.yBearing,
                cast() (found.extents.width + 1),
                cast() (found.extents.height + 1)
            });

            cairo.cairo_restore(form.layer.context);
        }

        x += found.extents.xAdvance;
    }
}

type TextEditFormData struct {
    highlights: buf.Buffer!(gui.Rect),
    currentMousePoint: struct{row: i64, col: i64},

    glyphCache: buf.Buffer!(CachedGlyph),
    lineCache: buf.Buffer!(CachedLine),

    textUpdated: bool,

    dragging: bool,
    mouseDownRect: optional.Optional!(gui.Rect),
    mouseMoveRect: optional.Optional!(gui.Rect),
}

fn cursorIterator() {
    type CursorIterator struct{
        current: i64,
        count: i64
    }

    #attr(CursorIterator) {
        fn empty(ci: CursorIterator) {
            return ci.current >= ci.count;
        }

        fn front(ci: CursorIterator) {
            return ^(context.tc.eb.currentScreen.cursorInfos.buf + ci.current);
        }

        fn popFront(ci: *CursorIterator) {
            ci.current += 1;
        }
    }

    return cast(CursorIterator) { 0, context.tc.eb.currentScreen.cursorInfos.length };
}

type CursorFormData struct {
    parentRect: *gui.Rect,
    parentId: i64
}

fn makeCursor(formData: *TextEditFormData, parentId: i64) {
    fn draw(formId: i64, formData: *CursorFormData, messageData: *none) {
        form := &context.forms.buf[formId];

        parent := &context.forms.buf[formData.parentId];
        parentData := cast(*TextEditFormData) parent.data;

        for cursorInfo: cursorIterator() {
            cursorRect: gui.Rect;
            hasPrevious := false;

            width: f64 = 20.0;

            if parentData.lineCache.buf.count > cursorInfo.row {
                cl := parentData.lineCache.buf[cursorInfo.row];

                if cl.glyphs.buf.count >= cursorInfo.col {
                    hasPrevious = true;

                    g := cl.glyphs.buf[cursorInfo.col - 1];
                    form.rect = {formData.parentRect.x + g.x + g.width, formData.parentRect.y + cl.low - 1, width, cast() FONT_SIZE};
                }
            }
            if !hasPrevious {
                form.rect = {formData.parentRect.x, formData.parentRect.y + cast() (cast() cursorInfo.row * FONT_SIZE), width, cast() FONT_SIZE};
            }

            #import "time";
            elapsedSeconds := cast(f64) context.elapsed.sec;

            -- alpha := (math.sin(elapsedSeconds * 9) + 1.0) / 2.0;
            alpha: f64 = 1.0;

            cairo.cairo_set_source_rgba(form.layer.context, 0.9, 0.9, 0.9, alpha);
            cairo.cairo_set_line_width(form.layer.context, 10);
            cairo.cairo_move_to(form.layer.context, 0, 0);
            cairo.cairo_line_to(form.layer.context, 0, 100);
            cairo.cairo_stroke(form.layer.context);
        }
    }

    -- todo(chad): wtf...
    if false { return 0; }

    parent := &context.forms.buf[parentId];
    cfd: CursorFormData = {&parent.rect, parentId};

    formId := gui.makeFormNonScaled({0, 0, 1.5, cast(f64) FONT_SIZE}, cfd, true);
    formId|gui.addReceiver(gui.DRAW, draw);
    &context.animators|:append(formId);
    return formId;
}

fn loadFonts() {
    emojiFont := "/System/Library/Fonts/Apple Color Emoji.ttc";
    -- font := "/System/Library/Fonts/Apple Color Emoji.ttc";

    -- font := "/Users/chadrussell/Projects/text/Noto-unhinted/NotoColorEmoji.ttf";
    -- font := "/Users/chadrussell/Projects/text/emojione-apple.ttc";
    -- font := "/Users/chadrussell/Library/Fonts/Roboto-Light.ttf";
    font := "/Library/Fonts/Inconsolata.otf";
    -- font := "/Users/chadrussell/Projects/text/JFWilwod.ttf";

    -- emojiMonkey := "🙈";

    -- For CAIRO, load using FreeType
    ftLibrary: ft.Library;
    ft.FT_Init_FreeType(&ftLibrary);
    ftFace: ft.Face;

    err := ft.FT_New_Face(ftLibrary, font|string.cstr, 0, &ftFace);
    if err != 0 {
        io.println("error creating freetype font face");
        panic();
    }
    context.cairo.font = cairo.cairo_ft_font_face_create_for_ft_face(ftFace, 0);

    err = ft.FT_New_Face(ftLibrary, emojiFont|string.cstr, 0, &ftFace);
    if err != 0 {
        io.println("error creating freetype emoji font face");
        panic();
    }
    context.cairo.emojiFont = cairo.cairo_ft_font_face_create_for_ft_face(ftFace, 0);

    -- For Harfbuzz, load using OpenType (HarfBuzz FT does not support bitmap font)
    blob := hb.hb_blob_create_from_file(font|string.cstr);
    face := hb.hb_face_create(blob, 0);
    context.hb.font = hb.hb_font_create(face);
    hb.hb_ot_font_set_funcs(context.hb.font);
    hb.hb_font_set_scale(context.hb.font, FONT_SIZE * 64, FONT_SIZE * 64);

    blob = hb.hb_blob_create_from_file(emojiFont|string.cstr);
    face = hb.hb_face_create(blob, 0);
    context.hb.emojiFont = hb.hb_font_create(face);
    hb.hb_ot_font_set_funcs(context.hb.emojiFont);
    hb.hb_font_set_scale(context.hb.emojiFont, FONT_SIZE * 64, FONT_SIZE * 64);

    context.hb.buffer = hb.hb_buffer_create();
}

fn make(rect: gui.Rect) {
    #import "random";
    random.seed();

    fn draw(formId: i64, formData: *TextEditFormData, messageData: *gui.Rect) {
        form := &context.forms.buf[formId];

        -- clear
        formId|gui.drawRect({0, 0, form.rect.width, form.rect.height}, 0.1739, 0.1867, 0.1433);

        startLine := cast(i64) messageData.y / cast(i64) FONT_SIZE;
        if startLine < 0 { startLine = 0; }

        endLine := startLine + 2 + (cast(i64) messageData.height + 1) / cast(i64) FONT_SIZE;
        maxLine := se.editor_buffer_get_line_count(context.tc.eb);
        if endLine > maxLine {
            endLine = maxLine;
        }

        for line: iter.range(startLine, endLine) {
            drawLine(formId, formData, line, messageData);
        }

        for highlight: formData.highlights.buf {
            -- translate into our space
            highlight.x -= messageData.x;
            highlight.y -= messageData.y;

            formId|gui.drawRect(highlight, 0.9, 0.9, 0.9, 0.5);
        }

        if formData.mouseDownRect.hasValue == true and formData.mouseMoveRect.hasValue == true {
            startX := formData.mouseDownRect.value.x - messageData.x;
            startY := formData.mouseDownRect.value.y - messageData.y;
            endX := formData.mouseMoveRect.value.x + formData.mouseMoveRect.value.width - messageData.x;
            endY := formData.mouseMoveRect.value.y + formData.mouseMoveRect.value.height - messageData.y;

            formId|gui.drawRect({startX, startY, endX - startX, endY - startY}, 0.9, 0.9, 0.9, 0.5);
        }

        if formData.textUpdated == true {
            formData.textUpdated = false;
        }
    }

    fn mouseToPoint(formId: i64, formData: *TextEditFormData, messageData: *gui.MouseMessageData) {
        form := &context.forms.buf[formId];

        localX := messageData.x - form.rect.x;
        localY := messageData.y - form.rect.y;

        -- y relative to the form
        line := cast(i64) (cast() localY / FONT_SIZE);

        if line < 0 or line >= formData.lineCache.buf.count {
            return optional.no!(gui.Rect)();
        }

        cl := formData.lineCache.buf[line];

        for g, i: cl.glyphs.buf {
            boundingLeft: gui.Rect = {form.rect.x + g.x, form.rect.y + cl.low - 1, g.width/2, cast() FONT_SIZE};
            boundingRight: gui.Rect = {form.rect.x + g.x + g.width/2, form.rect.y + cl.low - 1, g.width/2, cast() FONT_SIZE};

            if boundingLeft|:contains(messageData.x, messageData.y) {
                formData.currentMousePoint = {line, i};

                clG := cl.glyphs.buf[i - 1];
                if i > 0 {
                    r: gui.Rect = {clG.x + clG.width, cl.low - 1, 2, cast() FONT_SIZE};
                    return optional.yes(r);
                }
                else {
                    r: gui.Rect = {cl.glyphs.buf[0].x, cl.low - 1, 2, cast() FONT_SIZE};
                    return optional.yes(r);
                }
            }
            else if boundingRight|:contains(messageData.x, messageData.y) {
                formData.currentMousePoint = {line, i + 1};

                r: gui.Rect = {g.x + g.width, cl.low - 1, 2, cast() FONT_SIZE};
                return optional.yes(r);
            }
        }

        return optional.no!(gui.Rect)();
    }

    fn mousedown(formId: i64, formData: *TextEditFormData, messageData: *gui.MouseMessageData) {
        formData.dragging = true;

        formData.mouseMoveRect.hasValue = false;

        cursorRect := mouseToPoint(formId, formData, messageData);
        if cursorRect.hasValue {
            formData.mouseDownRect = cursorRect;
            gui.setFormNeedsDraw(formId);

            se.editor_buffer_set_cursor_point(context.tc.eb, formData.currentMousePoint.row, formData.currentMousePoint.col);
        }
    }

    fn mousemove(formId: i64, formData: *TextEditFormData, messageData: *gui.MouseMessageData) {
        form := &context.forms.buf[formId];

        oldCount := formData.highlights.buf.count;
        formData.highlights.buf.count = 0;

        cursorRect := mouseToPoint(formId, formData, messageData);
        if cursorRect.hasValue {
            if formData.dragging == true {
                formData.mouseMoveRect = cursorRect;
            }
            &formData.highlights|:append(cursorRect.value);
            gui.setFormNeedsDraw(formId);
        }

        if formData.dragging == true {
            se.editor_buffer_set_cursor_is_selection(context.tc.eb, 1);
            se.editor_buffer_set_cursor_point(context.tc.eb, formData.currentMousePoint.row, formData.currentMousePoint.col);
        }

        if oldCount != formData.highlights.buf.count {
            gui.setFormNeedsDraw(formId);
        }
    }

    fn mouseup(formId: i64, formData: *TextEditFormData, messageData: *gui.MouseMessageData) {
        formData.dragging = false;
    }

    fn keydown(formId: i64, formData: *TextEditFormData, messageData: *gui.KeyboardMessageData) {
        gui.broadcast(TEXT_UPDATE);

        if messageData.scancode == sdl.Key.BACKSPACE {
            se.editor_buffer_set_cursor_is_selection(context.tc.eb, 1);
            se.editor_buffer_set_cursor_pos_relative(context.tc.eb, -1);
            se.editor_buffer_delete(context.tc.eb);
            se.editor_buffer_set_cursor_is_selection(context.tc.eb, 0);
        }
        else if messageData.scancode == sdl.Key.SPACE {
            se.editor_buffer_insert(context.tc.eb, " \0".data);
        }
        else if messageData.scancode == sdl.Key.ENTER {
            se.editor_buffer_insert(context.tc.eb, "\n\0".data);
        }
        else if messageData.scancode == sdl.Key.LEFT {
            se.editor_buffer_set_cursor_pos_relative(context.tc.eb, -1);
        }
        else if messageData.scancode == sdl.Key.RIGHT {
            se.editor_buffer_set_cursor_pos_relative(context.tc.eb, 1);
        }
        else if messageData.scancode == sdl.Key.UP {
            for ci: iter.withIndex(cursorIterator()) {
                se.editor_buffer_set_cursor_point_for_cursor_index(context.tc.eb, ci.index, ci.it.row - 1, ci.it.col);
            }
        }
        else if messageData.scancode == sdl.Key.DOWN {
            for ci: iter.withIndex(cursorIterator()) {
                se.editor_buffer_set_cursor_point_for_cursor_index(context.tc.eb, ci.index, ci.it.row + 1, ci.it.col);
            }
        }
        else if messageData.scancode|:isalpha {
            if messageData.scancode == cast() 8 {
                -- se.editor_buffer_insert(context.tc.eb, "🙈\0".data);
                se.editor_buffer_insert(context.tc.eb, "👶🏾\0".data);
            }
            else if messageData.scancode == cast() 21 {
                se.editor_buffer_insert(context.tc.eb, "é\0".data);
            }
            else {
                se.editor_buffer_insert(context.tc.eb, :charsFor(messageData.scancode));
            }
        }
    }

    fn textUpdate(formId: i64, formData: *TextEditFormData, messageData: *none) {
        formData.textUpdated = true;
        formId|gui.setFormNeedsDraw;

        -- clear selection
        formData.mouseDownRect.hasValue = false;
        formData.mouseMoveRect.hasValue = false;
    }

    formData: TextEditFormData;

    formId := gui.makeForm(rect, formData, ownLayer: true);

    formId|gui.addReceiver(gui.DRAW, draw);
    formId|gui.addReceiver(gui.MOUSEMOVE, mousemove);
    formId|gui.addReceiver(gui.MOUSEDOWN, mousedown);
    formId|gui.addReceiver(gui.MOUSEUP, mouseup);
    formId|gui.addReceiver(gui.KEYDOWN, keydown);
    formId|gui.addReceiver(TEXT_UPDATE, textUpdate);

    &context.mousers|:append(formId);
    &context.texters|:append(formId);

    return formId;
}
