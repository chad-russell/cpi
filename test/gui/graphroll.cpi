#import "gui/gui";
#import "gui/scroller";
#import "io";
#import "buffer": buf;
#import "sdl";
#import "math";
#import "iter";
#import "rtmidi";

type Note struct {
    rect: gui.Rect!(f64),
    selected: bool,
    down: bool,
}

type GraphRollFormData struct {
    rect: gui.Rect!(f64),
    bounds: gui.Rect!(f64),

    notes: buf.Buffer!(Note),

    selecting: bool,
    selectStartX: f64,
    selectStartY: f64,

    draggingNotes: bool,
    dragStartX: f64,
    dragStartY: f64,

    mouseInResizeArea: bool,
    resizingNotes: bool,
    resizeStartX: f64,

    xResolution: f64 = 10,
    xOffset: f64
}

fn noteOn(note: Note) {
    rtmidi.noteOn(context.state.midiOut, cast() (20 - note.rect.y + 40));
}

fn noteOff(note: Note) {
    rtmidi.noteOff(context.state.midiOut, cast() (20 - note.rect.y + 40));
}

fn selectArea(state: GraphRollFormData) gui.Rect!(f64) {
    startX := state.selectStartX;
    startY := state.selectStartY;
    endX := context.mouse.x;
    endY := context.mouse.y;

    if startX > endX {
        startX = context.mouse.x;
        endX = state.selectStartX;
    }

    if startY > endY {
        startY = context.mouse.y;
        endY = state.selectStartY;
    }

    return {
        startX,
        startY,
        endX - startX,
        endY - startY
    };
}

fn yResolution(state: GraphRollFormData) {
    return state.rect.height / 20;
}

fn screenPixels(state: GraphRollFormData, x: f64) {
    hs := &context.state.playArea.horizontalScroller;
    scaleX := hs.rect.width / (hs.end - hs.begin);

    scrollBeginPercent := hs.begin / hs.rect.width;
    scrollEndPercent := hs.end / hs.rect.width;

    startWindow := state.rect.width * scrollBeginPercent;
    endWindow := state.rect.width * scrollEndPercent;
    windowPixels := endWindow - startWindow;

    pixels := x - startWindow;
    return state.rect.x + pixels * scaleX;
}

fn effectiveRect(note: Note, state: GraphRollFormData) gui.Rect!(f64) {
    offsetX: f64 = 0;
    offsetY: f64 = 0;

    localX := context.mouse.x - state.rect.x;
    localY := context.mouse.y - state.rect.y;

    resizeX: f64 = 0;

    yr := yResolution(state);
    noteY := math.floor(localY / yr);

    hs := &context.state.playArea.horizontalScroller;
    scaleX := hs.rect.width / (hs.end - hs.begin);

    if note.selected == true and state.draggingNotes == true {
        offsetX = context.mouse.x - state.dragStartX;
        offsetY = noteY - state.dragStartY;

        if context.state.playArea.quantizeButton.on == true {
            offsetX = math.quantize(offsetX, state.xResolution * scaleX);
        }
    }

    if note.selected == true and state.resizingNotes == true {
        resizeX = context.mouse.x - state.resizeStartX;
    }

    sp := screenPixels(state, note.rect.x * state.xResolution);

    er: gui.Rect!(f64) = {
        sp + offsetX,
        state.rect.y + (note.rect.y + offsetY) * yr,
        (note.rect.width) * state.xResolution * scaleX + resizeX,
        note.rect.height * yr
    };

    return gui.clip(er, state.bounds);
}

fn mouseButtonDown(messageData: *sdl.MouseButtonEvent, state: *GraphRollFormData) {
    localX := context.mouse.x - state.rect.x;
    localY := context.mouse.y - state.rect.y;

    if messageData.button == sdl.MouseButton.LEFT {
        didClickNote := false;
        noteClicked: *Note = nil;

        -- possibly select existing notes
        i := 0;
        for note: state.notes.buf|iter.byRef {
            if effectiveRect(^note, ^state)|gui.contains(context.mouse.x, context.mouse.y) {
                didClickNote = true;
                noteClicked = note;

                i += 1;
            }
        }

        if didClickNote == true {
            if context.modifierKeys.ctrl == false and noteClicked.selected == false {
                -- clear all selected notes
                for note: state.notes.buf|iter.byRef {
                    note.selected = false;
                }
            }

            noteClicked.selected = !context.modifierKeys.shift;
            if noteClicked.selected == true {
                if state.mouseInResizeArea == true {
                    state.resizingNotes = true;
                    state.resizeStartX = context.mouse.x;
                }
                else {
                    state.draggingNotes = true;
                    state.dragStartX = context.mouse.x;

                    yr := yResolution(^state);
                    noteY := math.floor(localY / yr);
                    state.dragStartY = noteY;
                }
            }

            return;
        }
        else if context.modifierKeys.ctrl == true {
            -- box select
            state.selecting = true;
            state.selectStartX = context.mouse.x;
            state.selectStartY = context.mouse.y;

            return;
        }

        if context.modifierKeys.shift {
            for note: state.notes.buf|iter.byRef {
                note.selected = false;
            }
            return;
        }

        for note: state.notes.buf|iter.byRef {
            note.selected = false;
        }

        -- add a new one
        hs := &context.state.playArea.horizontalScroller;
        scaleX := hs.rect.width / (hs.end - hs.begin);

        yr := yResolution(^state);
        noteY := math.floor(localY / yr);

        scrollBeginPercent := hs.begin / hs.rect.width;
        scrollEndPercent := hs.end / hs.rect.width;

        startWindow := state.rect.width * scrollBeginPercent;
        endWindow := state.rect.width * scrollEndPercent;
        windowPixels := endWindow - startWindow;

        clickedPercent := localX / state.rect.width;
        clickedPixels := windowPixels * clickedPercent;
        clickedLocation := startWindow + clickedPixels;
        clickedBeat := clickedLocation / state.xResolution;

        noteRect: gui.Rect!(f64) = {clickedBeat, noteY, 1, 1};
        &state.notes|:append({noteRect, false, false});
    }
    else if messageData.button == sdl.MouseButton.RIGHT {
        toDelete := false;
        i := 0;
        for note: state.notes.buf|iter.byRef {
            if effectiveRect(^note, ^state)|gui.contains(context.mouse.x, context.mouse.y) {
                if context.modifierKeys.shift == false {
                    note.selected = true;
                    toDelete = true;
                }
            }

            i += 1;
        }

        if toDelete == true {
            writeIndex := 0;
            readIndex := 0;
            while readIndex < state.notes.buf.count {
                if state.notes.buf[readIndex].selected == false {
                    state.notes.buf[writeIndex] = state.notes.buf[readIndex];
                    writeIndex += 1;
                }

                readIndex += 1;
            }

            state.notes.buf.count = writeIndex;
        }
    }
}

fn mouseButtonUp(messageData: *sdl.MouseButtonEvent, state: *GraphRollFormData) {
    hs := &context.state.playArea.horizontalScroller;
    scaleX := (hs.end - hs.begin) / hs.rect.width;

    localX := context.mouse.x - state.rect.x;
    localY := context.mouse.y - state.rect.y;

    if state.draggingNotes == true {
        yr := yResolution(^state);
        dragStopY := math.floor(localY / yr);

        for note: state.notes.buf|iter.byRef {
            if note.selected == true {
                note.rect.x += (context.mouse.x - state.dragStartX) * scaleX / state.xResolution;
                note.rect.y += dragStopY - state.dragStartY;

                if context.state.playArea.quantizeButton.on == true {
                    note.rect.x = math.floor(note.rect.x + state.xOffset + 0.001) - state.xOffset;
                }
            }
        }

        state.draggingNotes = false;
    }

    if state.resizingNotes == true {
        for note: state.notes.buf|iter.byRef {
            if note.selected == true {
                note.rect.width += (context.mouse.x - state.resizeStartX) * scaleX / state.xResolution;
            }
        }

        state.resizingNotes = false;
    }

    state.selecting = false;
}

fn mouseMove(messageData: *sdl.MouseMotionEvent, state: *GraphRollFormData) {
    if state.resizingNotes == true {
        return;
    }

    localX := context.mouse.x - state.rect.x;
    localY := context.mouse.y - state.rect.y;

    if state.selecting == false {
        for note: state.notes.buf {
            er := effectiveRect(note, ^state);

            endRect: gui.Rect!(f64) = {
                er.x + er.width - 4,
                er.y,
                4,
                er.height
            };

            if endRect|gui.contains(context.mouse.x, context.mouse.y) {
                sdl.SDL_SetCursor(context.arrowCursorWE);
                state.mouseInResizeArea = true;
                return;
            }
        }

        sdl.SDL_SetCursor(context.arrowCursor);
        state.mouseInResizeArea = false;

        return;
    }

    if context.modifierKeys.ctrl == false {
        state.selecting = false;
        return;
    }

    if state.selecting == true {
        -- convert selectArea to local coordinates
        sa := selectArea(^state);

        for note: state.notes.buf|iter.byRef {
            if effectiveRect(^note, ^state)|gui.intersects(sa) {
                note.selected = !context.modifierKeys.shift;
            }
        }
    }
}

fn draw(rect: gui.Rect!(f64), bounds: gui.Rect!(f64), state: *GraphRollFormData) {
    state.rect = rect;
    state.bounds = bounds;

    -- background
    gui.drawRect(context.cairo.layer, gui.clip(rect, bounds), cast(f64) 67.0/255.0, cast(f64) 84.0/255.0, cast(f64) 94.0/255.0);

    -- outline
    gui.drawOutline(context.cairo.layer, gui.clip(rect, bounds), 0.2, 0.2, 0.2, lineWidth: 1.5);

    -- vertical lines
    offsetPixels := state.xResolution * state.xOffset;

    vlX: f64 = -offsetPixels;
    light := true;
    lastX := vlX;

    blockWidth := state.xResolution * cast() context.state.beatsPerMeasure;

    while vlX < rect.x + rect.width {
        if light == true {
            pixelsStart := screenPixels(^state, vlX);
            pixelsEnd := screenPixels(^state, vlX + blockWidth);
            blockRect: gui.Rect!(f64) = {pixelsStart, rect.y, pixelsEnd - pixelsStart, rect.height};

            gui.drawRect(context.cairo.layer, gui.clip(blockRect, bounds), cast(f64) 52.0/255.0, cast(f64) 68.0/255.0, cast(f64) 78.0/255.0);
        }

        vlX += blockWidth;
        light = !light;
    }

    vlX = -offsetPixels;
    vlN := 0;
    while vlX < rect.x + rect.width {
        pixelsX := screenPixels(^state, vlX);
        lineRect: gui.Rect!(f64) = {pixelsX, bounds.y, 0, bounds.y + bounds.height};

        if pixelsX > bounds.x and pixelsX < bounds.x + bounds.width {
            width: f64 = 1;
            if vlN mod cast() context.state.beatsPerMeasure == 0 {
                width = 2;
            }

            gui.drawLine(context.cairo.layer, lineRect, 0.2, 0.2, 0.2, width: width);
        }

        vlX += state.xResolution;
        vlN += 1;
    }

    yr := yResolution(^state);

    y := rect.y + yr;
    while y < rect.y + rect.height {
        guideLineRect: gui.Rect!(f64) = {rect.x, y, rect.width, 0};
        gui.drawLine(context.cairo.layer, gui.clip(guideLineRect, bounds), 0.2, 0.2, 0.2, width: 0.5);
        y += yr;
    }

    -- notes
    for note: state.notes.buf {
        if note.selected == true and context.state.playArea.quantizeButton.on == true {
            note.rect.x = math.floor(note.rect.x + state.xOffset + 0.001) - state.xOffset;
        }

        er := effectiveRect(note, ^state);

        if note.down == true {
            gui.drawRect(context.cairo.layer, er, cast(f64) 239.0/255.0, cast(f64) 239.0/255.0, cast(f64) 186.0/255.0);
        }
        else if note.selected == true {
            gui.drawRect(context.cairo.layer, er, cast(f64) 186.0/255.0, cast(f64) 239.0/255.0, cast(f64) 194.0/255.0);
        }
        else {
            gui.drawRect(context.cairo.layer, er, cast(f64) 117.0/255.0, cast(f64) 144.0/255.0, cast(f64) 130.0/255.0);
        }
    }

    -- select area
    if state.selecting {
        gui.drawRect(context.cairo.layer, selectArea(^state), 0.9, 0.9, 0.9, 0.2);
    }
}
