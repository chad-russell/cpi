#import "gui/gui";
#import "gui/track";
#import "sdl";
#import "buffer": buf;
#import "io";

type Clip struct {
    rect: gui.Rect!(f64),
}

type TrackContainerFormData struct {
    rect: gui.Rect!(f64),
    bounds: gui.Rect!(f64),
    metaRect: gui.Rect!(f64),
    tr: track.TrackState,
}

fn draw(rect: gui.Rect!(f64), bounds: gui.Rect!(f64), index: i64, metaMargin: f64) {
    state := &context.state.playArea.tracks.buf[index];
    state.rect = rect;
    state.bounds = bounds;

    -- delete handle
    state.metaRect = {rect.x, rect.y, metaMargin, rect.height};
    gui.drawRect(context.cairo.layer, gui.clip(state.metaRect, bounds), 0.9, 0.6, 0.6);

    rc := rect;
    rc.x += metaMargin;
    rc.width -= metaMargin;

    grBounds := bounds;
    grBounds.x = metaMargin;
    grBounds.width -= metaMargin;

    track.draw(rc, grBounds, &state.tr);
}

fn mouseButtonDown(messageData: *sdl.MouseButtonEvent, index: i64) {
    state := &context.state.playArea.tracks.buf[index];

    -- delete handle
    if state.metaRect|gui.containsMouse {
        &context.state.playArea.tracks|buf.deleteInPlace(index);
    }
    else {
        track.mouseButtonDown(messageData, index);
    }
}
