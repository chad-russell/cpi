#import "gui/gui";
#import "string";

VALUE_UPDATE := "value_update";

type SliderFormData struct {
    max: i64,
    current: i64 = 0,

    bgColor: gui.Color,
    fgColor: gui.Color,

    grabberRect: gui.Rect!(f64)
}

fn draw(formId: i64, formData: *SliderFormData, messageData: *none) {
    form := &context.forms.buf[formId];

    -- background
    formId|gui.drawRect(form.rect, formData.bgColor.r, formData.bgColor.g, formData.bgColor.b);

    -- slider-grabber
    formData.grabberRect = form.rect;
    formData.grabberRect.x = (form.rect.width - 10) * cast(f64) formData.current / cast(f64) (formData.max - 1);
    formData.grabberRect.width = 10;
    formId|gui.drawRect(formData.grabberRect, formData.fgColor.r, formData.fgColor.g, formData.fgColor.b);
}

fn mouseDown(formId: i64, formData: *SliderFormData, messageData: *gui.MouseMessageData) {
    if formData.grabberRect|:contains(messageData.x, messageData.y) {
        formId|gui.addReceiver(gui.MOUSEMOVE, mouseMove);
        formId|gui.addReceiver(gui.MOUSEUP, mouseUp);
    }
}

type ValueUpdateData struct {
    old: i64,
    new: i64,
    form: *gui.Form
}

fn mouseMove(formId: i64, formData: *SliderFormData, messageData: *gui.MouseMessageData) {
    form := &context.forms.buf[formId];

    oldCurrent := formData.current;
    formData.current = cast(i64) (cast(f64) messageData.x * cast(f64) formData.max / form.rect.width);

    if oldCurrent != formData.current {
        gui.setFormNeedsDraw(formId);

        formId|gui.sendMessage(cast() { VALUE_UPDATE, &formData.current });
    }
}

fn mouseUp(formId: i64, formData: *SliderFormData, messageData: *gui.MouseMessageData) {
    formId|gui.removeReceiver(gui.MOUSEMOVE);
    formId|gui.removeReceiver(gui.MOUSEUP);
}

fn create(rect: gui.Rect!(f64), max: i64, bgColor: gui.Color, fgColor: gui.Color) {
    sfd: SliderFormData;
    sfd.max = max;
    sfd.bgColor = bgColor;
    sfd.fgColor = fgColor;

    formId := gui.makeForm(rect, sfd);

    formId|gui.addReceiver(gui.DRAW, draw);
    formId|gui.addReceiver(gui.MOUSEDOWN, mouseDown);

    &context.mousers|:append(formId);

    return formId;
}
