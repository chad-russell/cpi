#import "gui/gui";
#import "gui/graphroll";
#import "gui/graphrollContainer";
#import "gui/scroller";
#import "io";
#import "buffer": buf;
#import "sdl";
#import "math";

grabberRadius: f64 = 15;
grabberMaxSize: f64 = 10;

type PlayAreaFormData struct {
    compositionLength: f64,
    playing: bool,
    playhead: f64,
    playheadGrabber: f64,
    draggingPlayhead: bool,
    graphRolls: buf.Buffer!(graphrollContainer.GraphRollContainerFormData),
    horizontalScroller: scroller.Data,
    verticalScroller: scroller.Data,
    addNewGraphRollButton: gui.Rect!(f64),
}

fn mouseButtonDown(messageData: *sdl.MouseButtonEvent) {
    if context.state.playArea.playheadGrabber > 0 {
        context.state.playArea.draggingPlayhead = true;
        return;
    }

    if context.state.playArea.horizontalScroller.rect|gui.containsMouse {
        scroller.mouseButtonDown(messageData, &context.state.playArea.horizontalScroller);
    }
    if context.state.playArea.verticalScroller.rect|gui.containsMouse {
        scroller.mouseButtonDown(messageData, &context.state.playArea.verticalScroller);
    }

    for gr, i: context.state.playArea.graphRolls.buf {
        if gr.rect|gui.containsMouse {
            graphrollContainer.mouseButtonDown(messageData, i);
        }
    }

    if context.state.playArea.addNewGraphRollButton|gui.containsMouse {
        grfd: graphrollContainer.GraphRollContainerFormData;
        &context.state.playArea.graphRolls|:append(grfd);
    }
}

fn mouseButtonUp(messageData: *sdl.MouseButtonEvent) {
    context.state.playArea.draggingPlayhead = false;

    scroller.mouseButtonUp(&context.state.playArea.horizontalScroller);
    scroller.mouseButtonUp(&context.state.playArea.verticalScroller);

    for gr, i: context.state.playArea.graphRolls.buf {
        if gr.rect|gui.contains(cast(f64) messageData.x, cast(f64) messageData.y) {
            graphroll.mouseButtonUp(messageData, i);
        }
    }
}

fn mouseMove(messageData: *sdl.MouseMotionEvent) {
    if context.state.playArea.draggingPlayhead == true {
        context.state.playArea.playheadGrabber = cast() messageData.y;
        context.state.playArea.playhead = cast() messageData.x;
        return;
    }

    scroller.mouseMove(&context.state.playArea.horizontalScroller);
    scroller.mouseMove(&context.state.playArea.verticalScroller);

    if math.abs(cast() messageData.x - context.state.playArea.playhead) < grabberRadius {
        context.state.playArea.playheadGrabber = cast() messageData.y;
    }
    else {
        context.state.playArea.playheadGrabber = -1;

        for gr, i: context.state.playArea.graphRolls.buf {
            if gr.rect|gui.contains(cast(f64) messageData.x, cast(f64) messageData.y) {
                graphroll.mouseMove(messageData, i);
            }
        }
    }
}

fn keydown(messageData: *sdl.KeyboardEvent) {
    if messageData.keysym.scancode == sdl.Key.SPACE {
        context.state.playArea.playing = !context.state.playArea.playing;
    }
    else if messageData.keysym.scancode == sdl.Key.LEFT {
        io.println("left");
        context.state.playArea.playhead = 0;
    }
}

fn processMessages() {
    if context.keyDownEvent != nil {
        keydown(context.keyDownEvent);
    }
    if context.mouseButtonDownEvent != nil {
        mouseButtonDown(context.mouseButtonDownEvent);
    }
    if context.mouseButtonUpEvent != nil {
        mouseButtonUp(context.mouseButtonUpEvent);
    }
    if context.mouseMotionEvent != nil {
        mouseMove(context.mouseMotionEvent);
    }
}

fn draw(rect: gui.Rect!(f64)) {
    -- background
    gui.drawRect(context.cairo.layer, rect, 0.9, 0.8, 0.7);

    y: f64 = 0;

    -- scroll/resize bar
    srHeight: f64 = 25;
    scroller.drawHorizontal({0, y, rect.width, srHeight}, &context.state.playArea.horizontalScroller);
    y += srHeight;

    -- vertical scroll/resize bar
    scroller.drawVertical({rect.width-srHeight, y, srHeight, rect.height}, &context.state.playArea.verticalScroller);

    metaMargin := rect.width*0.05;
    grButtonHeight := rect.height * 0.1;

    -- graph rolls
    vs := &context.state.playArea.verticalScroller;
    yScale := vs.rect.height / (vs.end - vs.begin);

    graphRollScrollViewHeight := rect.height - grButtonHeight - y;

    grAreaBounds: gui.Rect!(f64) = rect;
    grAreaBounds.y = y;
    grAreaBounds.height -= y;

    grHeight := graphRollScrollViewHeight / cast() context.state.playArea.graphRolls.buf.count * yScale;
    for gr, grIndex: context.state.playArea.graphRolls.buf {
        graphrollContainer.draw({0, y, rect.width - metaMargin - srHeight, grHeight}, grAreaBounds, grIndex, metaMargin, -vs.begin * yScale);
        y += grHeight;
    }

    -- button to add graph roll
    context.state.playArea.addNewGraphRollButton = {0, y - vs.begin * yScale, metaMargin, grButtonHeight};
    gui.drawRect(context.cairo.layer, context.state.playArea.addNewGraphRollButton, 0.4, 0.4, 1);

    -- playhead
    context.cairo.layer|gui.drawRect({context.state.playArea.playhead, 0, 1, rect.height}, 1, 0.2, 0.2);
    if context.state.playArea.playing {
        context.state.playArea.playhead += 1;
    }

    -- playhead grabber
    if context.state.playArea.playheadGrabber > 0 {
        xDist: f64 = math.abs(context.mouse.x - context.state.playArea.playhead);
        grabberSize := math.min((xDist-15)*(xDist-15)/15, grabberMaxSize);

        context.cairo.layer|gui.drawRect({
            context.state.playArea.playhead - grabberSize/2,
            context.state.playArea.playheadGrabber - grabberSize/2,
            grabberSize,
            grabberSize
        }, 1, 0.2, 0.2);
    }
}
