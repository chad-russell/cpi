#import "gui/gui";
#import "gui/track";
#import "gui/graphroll";
#import "gui/trackContainer";
#import "gui/scroller";
#import "io";
#import "buffer": buf;
#import "sdl";
#import "math";
#import "iter";

grabberRadius: f64 = 15;
grabberMaxSize: f64 = 10;

type ScreenType enum {
    TrackList,
    Track
}

type Checkbox struct {
    rect: gui.Rect!(f64),
    on: bool,
}

type PlayAreaFormData struct {
    playing: bool,
    playhead: u64,
    playheadGrabber: f64,
    draggingPlayhead: bool,
    tracks: buf.Buffer!(trackContainer.TrackContainerFormData),
    horizontalScroller: scroller.Data,
    verticalScroller: scroller.Data,
    addNewTrackButton: gui.Rect!(f64),

    quantizeButton: Checkbox,

    screenType: ScreenType = ScreenType.TrackList,
    screenData: *none = nil,

    compositionLengthInMeasures: u64 = 30,
    beatsPerMinute: u32 = 120,
    beatsPerMeasure: u32 = 4
}

fn mouseButtonDown(messageData: *sdl.MouseButtonEvent) {
    if context.state.playArea.playheadGrabber > 0 {
        context.state.playArea.draggingPlayhead = true;
        return;
    }

    if context.state.playArea.horizontalScroller.rect|gui.containsMouse {
        scroller.mouseButtonDown(messageData, &context.state.playArea.horizontalScroller);
        return;
    }
    if context.state.playArea.verticalScroller.rect|gui.containsMouse {
        scroller.mouseButtonDown(messageData, &context.state.playArea.verticalScroller);
        return;
    }

    if context.state.playArea.quantizeButton.rect|gui.containsMouse {
        context.state.playArea.quantizeButton.on = !context.state.playArea.quantizeButton.on;
    }

    if context.state.playArea.screenType == ScreenType.TrackList {
        if context.state.playArea.addNewTrackButton|gui.containsMouse {
            tr: trackContainer.TrackContainerFormData;
            &context.state.playArea.tracks|:append(tr);
            return;
        }

        for tr, i: context.state.playArea.tracks.buf {
            if tr.rect|gui.containsMouse {
                trackContainer.mouseButtonDown(messageData, i);
                return;
            }
        }
    }
    else if context.state.playArea.screenType == ScreenType.Track {
        clip := cast(*track.Clip) context.state.playArea.screenData;
        graphroll.mouseButtonDown(messageData, &clip.graphRoll);
    }
}

fn mouseButtonUp(messageData: *sdl.MouseButtonEvent) {
    context.state.playArea.draggingPlayhead = false;

    scroller.mouseButtonUp(&context.state.playArea.horizontalScroller);
    scroller.mouseButtonUp(&context.state.playArea.verticalScroller);

    if context.state.playArea.screenType == ScreenType.TrackList {
        for tr, i: context.state.playArea.tracks.buf {
            if tr.bounds|gui.containsMouse {
                track.mouseButtonUp(messageData, i);
            }
        }
    }
    else if context.state.playArea.screenType == ScreenType.Track {
        clip := cast(*track.Clip) context.state.playArea.screenData;
        graphroll.mouseButtonUp(messageData, &clip.graphRoll);
    }
}

fn mouseMove(messageData: *sdl.MouseMotionEvent) {
    if context.state.playArea.draggingPlayhead == true {
        context.state.playArea.playheadGrabber = cast() messageData.y;
        context.state.playArea.playhead = cast() pixelsToUsecs(cast(f64) messageData.x);
        return;
    }

    scroller.mouseMove(&context.state.playArea.horizontalScroller);
    scroller.mouseMove(&context.state.playArea.verticalScroller);

    if math.abs(cast() messageData.x - usecsToPixels(context.state.playArea.playhead)) < grabberRadius {
        context.state.playArea.playheadGrabber = cast() messageData.y;
    }
    else if context.state.playArea.screenType == ScreenType.TrackList {
        context.state.playArea.playheadGrabber = -1;

        for tr, i: context.state.playArea.tracks.buf {
            if tr.rect|gui.contains(cast(f64) messageData.x, cast(f64) messageData.y) {
                track.mouseMove(messageData, i);
            }
        }
    }
    else if context.state.playArea.screenType == ScreenType.Track {
        context.state.playArea.playheadGrabber = -1;

        clip := cast(*track.Clip) context.state.playArea.screenData;
        graphroll.mouseMove(messageData, &clip.graphRoll);
    }
}

fn keydown(messageData: *sdl.KeyboardEvent) {
    if messageData.keysym.scancode == sdl.Key.SPACE {
        context.state.playArea.playing = !context.state.playArea.playing;
    }
    else if messageData.keysym.scancode == sdl.Key.LEFT {
        io.println("left");
        context.state.playArea.playhead = 0;
    }
}

fn processMessages() {
    if context.keyDownEvent != nil {
        keydown(context.keyDownEvent);
    }
    if context.mouseButtonDownEvent != nil {
        mouseButtonDown(context.mouseButtonDownEvent);
    }
    if context.mouseButtonUpEvent != nil {
        mouseButtonUp(context.mouseButtonUpEvent);
    }
    if context.mouseMotionEvent != nil {
        mouseMove(context.mouseMotionEvent);
    }
}

fn draw(rect: gui.Rect!(f64)) {
    -- background
    gui.drawRect(context.cairo.layer, rect, cast(f64) 67.0/255.0, cast(f64) 77.0/255.0, cast(f64) 82.0/255.0);

    y: f64 = 0;

    -- update playhead
    if context.state.playArea.playing == true and context.state.playArea.tracks.buf.count > 0 {
        pixelsPerBeat := context.state.playArea.tracks.buf[0].tr.xResolution * scaleX;
        pixelsPerMinute := pixelsPerBeat * cast() context.state.playArea.beatsPerMinute;
        usecs := cast(u64) context.dt.sec * 1_000_000 + cast(u64) context.dt.usec;

        context.state.playArea.playhead += usecs;
    }

    -- options
    optionHeight: f64 = 25;
    context.state.playArea.quantizeButton.rect = {0, 0, optionHeight, optionHeight};
    if context.state.playArea.quantizeButton.on {
        gui.drawRect(context.cairo.layer, context.state.playArea.quantizeButton.rect, 0.9, 0.2, 0.2);
    }
    else {
        gui.drawOutline(context.cairo.layer, context.state.playArea.quantizeButton.rect, 0.9, 0.2, 0.2);
    }
    y += optionHeight;

    -- scroll/resize bar
    srHeight: f64 = 25;
    scroller.drawHorizontal({0, y, rect.width - srHeight, srHeight}, &context.state.playArea.horizontalScroller);
    y += srHeight;

    -- vertical scroll/resize bar
    scroller.drawVertical({rect.width-srHeight, srHeight, srHeight, rect.height - srHeight}, &context.state.playArea.verticalScroller);

    trackScrollViewHeight := rect.height - y;

    trAreaBounds: gui.Rect!(f64) = rect;
    trAreaBounds.y = y;
    trAreaBounds.height -= y;
    trAreaBounds.width -= srHeight;

    vs := &context.state.playArea.verticalScroller;
    percScrolled := scroller.percScrolled(vs);
    yScale := vs.rect.height / (vs.end - vs.begin);
    maxOffset := trackScrollViewHeight * yScale - trackScrollViewHeight;
    scrollOffsetY := percScrolled * maxOffset;

    if context.keyDownEvent != nil
        and context.keyDownEvent.keysym.scancode == sdl.Key.ESCAPE
        and context.state.playArea.screenType == ScreenType.Track {
        context.state.playArea.screenType = ScreenType.TrackList;
    }

    if context.state.playArea.screenType == ScreenType.TrackList {
        trButtonHeight := rect.height * 0.1;

        -- graph rolls
        trHeight := trackScrollViewHeight / cast() context.state.playArea.tracks.buf.count * yScale;
        metaMargin := rect.width*0.05;

        for tr, trIndex: context.state.playArea.tracks.buf {
            trackContainer.draw({rect.x, y - scrollOffsetY, rect.width - srHeight, trHeight}, trAreaBounds, trIndex, metaMargin);
            y += trHeight;
        }

        -- button to add track
        context.state.playArea.addNewTrackButton = {10, rect.y + rect.height - trButtonHeight - 10, trButtonHeight, trButtonHeight};
        gui.drawRect(context.cairo.layer, context.state.playArea.addNewTrackButton, 0.4, 0.4, 1);
    }
    else if context.state.playArea.screenType == ScreenType.Track {
        clip := cast(*track.Clip) context.state.playArea.screenData;

        -- graphRect: gui.Rect!(f64) = {rect.x, y - scrollOffsetY, rect.width - srHeight, rect.height * yScale};
        graphRect: gui.Rect!(f64) = {rect.x, y - scrollOffsetY, rect.width - srHeight, (rect.height - y) * yScale};

        -- clip.rect.width is the number of beats
        clip.graphRoll.xResolution = graphRect.width / clip.rect.width;
        clip.graphRoll.xOffset = clip.rect.x / clip.resolution;

        graphroll.draw(graphRect, trAreaBounds, &clip.graphRoll);
    }
    else {
        panic();
    }

    -- draw playhead
    playheadPixels: f64 = usecsToPixels(context.state.playArea.playhead);
    context.cairo.layer|gui.drawRect({playheadPixels, 0, 1, rect.height}, 1, 0.2, 0.2);

    hs := &context.state.playArea.horizontalScroller;
    scaleX := hs.rect.width / (hs.end - hs.begin);

    -- playhead grabber
    if context.state.playArea.playheadGrabber > 0 {
        xDist: f64 = math.abs(context.mouse.x - usecsToPixels(context.state.playArea.playhead));
        grabberSize := math.min((xDist-15)*(xDist-15)/15, grabberMaxSize);

        ph: f64 = usecsToPixels(context.state.playArea.playhead);

        context.cairo.layer|gui.drawRect({
            ph - grabberSize/2,
            context.state.playArea.playheadGrabber - grabberSize/2,
            grabberSize,
            grabberSize
        }, 1, 0.2, 0.2);
    }

    processNoteOnOff();
}

fn processNoteOnOff() {
    hs := &context.state.playArea.horizontalScroller;
    scaleX := hs.rect.width / (hs.end - hs.begin);

    for track: context.state.playArea.tracks.buf {
        clipExtraWidth: f64 = 0;
        if track.tr.resizingClips == true {
            clipExtraWidth = context.mouse.x - track.tr.resizeStartX;
        }

        for clip: track.tr.clips.buf {
            beatsInClip: f64;
            if clip.selected {
                beatsInClip = clip.rect.width + clipExtraWidth / scaleX / track.tr.xResolution;
            }
            else {
                beatsInClip = clip.rect.width;
            }

            xResolution := clip.rect.width / beatsInClip;
            yResolution := clip.rect.height / 20;

            for note: clip.graphRoll.notes.buf|iter.byRef {
                er: gui.Rect!(f64) = {
                    clip.rect.x + note.rect.x * xResolution, clip.rect.y + note.rect.y * yResolution,
                    note.rect.width * xResolution, note.rect.height * yResolution
                };

                usecsPerMinute := cast(f64) 60 * 1_000_000;
                usecsPerBeat: f64 = usecsPerMinute / cast() context.state.playArea.beatsPerMinute;

                clipStartUsec: f64 = cast(f64) usecsPerBeat * cast() (clip.rect.x / track.tr.xResolution);

                noteStartUsec: f64 = clipStartUsec + usecsPerBeat * note.rect.x;
                noteWidthUsec: f64 = usecsPerBeat * cast() note.rect.width;

                playhead := cast(f64) context.state.playArea.playhead;

                if note.previewing == true {
                    if note.down == false {
                        note.down = true;
                        graphroll.noteOn(note);
                    }

                    note.previewTimer -= cast(u64) context.dt.sec * 1_000_000 + cast() context.dt.usec;

                    if note.previewTimer <= 0 {
                        note.down = false;
                        note.previewing = false;
                        graphroll.noteOff(note);
                    }
                }
                else if playhead > noteStartUsec and playhead < noteStartUsec + noteWidthUsec {
                    if note.down == false {
                        note.down = true;
                        graphroll.noteOn(note);
                    }
                    gui.drawRect(context.cairo.layer, er, cast(f64) 239.0/255.0, cast(f64) 239.0/255.0, cast(f64) 186.0/255.0);
                }
                else {
                    if note.down == true {
                        note.down = false;
                        graphroll.noteOff(note);
                    }

                    if note.selected == true {
                        gui.drawRect(context.cairo.layer, er, cast(f64) 186.0/255.0, cast(f64) 239.0/255.0, cast(f64) 194.0/255.0);
                    }
                    else {
                        gui.drawRect(context.cairo.layer, er, cast(f64) 117.0/255.0, cast(f64) 144.0/255.0, cast(f64) 130.0/255.0);
                    }
                }
            }
        }
    }
}

fn usecsToPixels(usecs: u64) f64 {
    state := &context.state.playArea;

    if state.tracks.buf.count == 0 {
        return 0;
    }

    if state.screenType == ScreenType.TrackList {
        track0 := state.tracks.buf[0].tr;

        totalMinutes := state.compositionLengthInMeasures * cast() state.beatsPerMeasure / cast() state.beatsPerMinute;
        totalUsecs := totalMinutes * 60 * 1_000_000;
        perc := cast(f64) state.playhead / cast() totalUsecs;
        x: f64 = track0.rect.width * perc;

        pixels := track.screenPixels(track0, x);

        return pixels;
    }
    else if state.screenType == ScreenType.Track {
        usecsPerMinute := cast(f64) 60 * 1_000_000;
        usecsPerBeat: f64 = usecsPerMinute / cast() state.beatsPerMinute;

        clip := cast(*track.Clip) context.state.playArea.screenData;

        trackStartUsecs := clip.graphRoll.xOffset * usecsPerBeat;
        trackEndUsecs := trackStartUsecs + clip.rect.width * usecsPerBeat;

        ph := cast(f64) state.playhead;

        playheadPerc := cast(f64) (ph - trackStartUsecs) / cast() (trackEndUsecs - trackStartUsecs);
        graphRect := clip.graphRoll.rect;

        pixels: f64 = graphRect.x + graphRect.width * playheadPerc;

        hs := &state.horizontalScroller;
        scaleX := hs.rect.width / (hs.end - hs.begin);

        pixels *= scaleX;
        pixels -= hs.begin * scaleX;

        return pixels;
    }

    panic();
}

fn pixelsToUsecs(x: f64) f64 {
    state := &context.state.playArea;

    if state.tracks.buf.count == 0 {
        return 0;
    }

    if state.screenType == ScreenType.TrackList {
        track0 := state.tracks.buf[0].tr;

        totalMinutes := state.compositionLengthInMeasures * cast() state.beatsPerMeasure / cast() state.beatsPerMinute;
        totalUsecs := totalMinutes * 60 * 1_000_000;

        pixels := track.rectPixels(track0, x);
        perc := pixels / track0.rect.width;

        return perc * cast() totalUsecs;
    }
    else if state.screenType == ScreenType.Track {
        usecsPerMinute := cast(f64) 60 * 1_000_000;
        usecsPerBeat: f64 = usecsPerMinute / cast() state.beatsPerMinute;

        clip := cast(*track.Clip) context.state.playArea.screenData;

        trackStartUsecs := clip.graphRoll.xOffset * usecsPerBeat;
        trackEndUsecs := trackStartUsecs + clip.rect.width * usecsPerBeat;

        trackStartPixels := clip.graphRoll.rect.x;

        hs := &state.horizontalScroller;
        scaleX := hs.rect.width / (hs.end - hs.begin);

        trackStartPixels *= scaleX;
        trackStartPixels -= hs.begin * scaleX;

        trackEndPixels := trackStartPixels + clip.graphRoll.rect.width * scaleX;

        playheadPerc := cast(f64) (x - trackStartPixels) / cast() (trackEndPixels - trackStartPixels);

        return trackStartUsecs + playheadPerc * (trackEndUsecs - trackStartUsecs);
    }

    panic();
}
