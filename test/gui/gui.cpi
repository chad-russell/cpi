#import "sdl";
#import "buffer": buf;
#import "io";
#import "cairo";
#import "mem";
#import "string";
#import "iter";
#import "math";
#import "time";

WIDTH   : i32 = 1000;
HEIGHT  : i32 = 600;

type Color struct {
    r: f64,
    g: f64,
    b: f64,
    a: f64 = 1.0
}

#context mouse: Point!(f64)

type MouseMessageData struct {
    x: f64,
    y: f64
}

type MouseScrollMessageData struct {
    x: f64,
    y: f64,
    flipped := false
}

type KeyboardMessageData struct {
    scancode: sdl.Key
}

type Rect struct {
    x: f64,
    y: f64,
    width: f64,
    height: f64
}

type Point(T := typeof(x)) struct {
    x: T,
    y: T
}

fn contains(r: Rect, x: f64, y: f64) {
    er := r;

    return er.x <= x
       and er.x + er.width >= x
       and er.y <= y
       and er.y + er.height >= y;
}

fn lerp(x: f64, y: f64, t: f64) {
    return x + (y - x) * t;
}

fn containsMouse(r: Rect) {
    return contains(r, context.mouse.x, context.mouse.y);
}

fn intersects(r1: Rect, r2: Rect) {
    -- If one rectangle is on left side of other
    if r1.x > r2.x + r2.width or r2.x > r1.x + r1.width {
        return false;
    }

    -- If one rectangle is above other
    if r1.y > r2.y + r2.height or r2.y > r1.y + r1.height {
        return false;
    }

    return true;
}

fn inset(r: Rect, i: f64) Rect {
    return {r.x + i, r.y + i, r.width - i*2, r.height - i*2};
}

fn translate(r: Rect, p: Point!(f64)) Rect {
    return {r.x + p.x, r.y + p.y, r.width, r.height};
}

fn clip(r1: Rect, r2: Rect) {
    if intersects(r1, r2) == false {
        return {0, 0, 0, 0};
    }

    startX := math.max(r1.x, r2.x);
    startY := math.max(r1.y, r2.y);
    endX := math.min(r1.x + r1.width, r2.x + r2.width);
    endY := math.min(r1.y + r1.height, r2.y + r2.height);

    return {
        startX,
        startY,
        endX - startX,
        endY - startY
    };
}

type Message struct {
    name: []i8,
    data: *none
}

type ReceiverHandler fn(formId: i64, formData: *none, messageData: *none) none

type Receiver struct {
    name: []i8,
    handle: ReceiverHandler
}

type Layer struct {
    surface: *cairo.Surface,
    context: *cairo.Context
}

fn makeLayer(rect: Rect) {
    layerSurface := cairo.cairo_image_surface_create(cairo.FORMAT_ARGB32,
        cast() rect.width,
        cast() rect.height);

    layerContext := cairo.cairo_create(layerSurface);

    cairo.cairo_surface_set_device_scale(layerSurface, context.sdl.xScale, context.sdl.yScale);

    return cast(Layer) {layerSurface, layerContext};
}

#context sdl: struct {
    window: *sdl.Window,
    renderer: *sdl.Renderer,

    texture: *sdl.Texture,
    pixels: *none,
    pitch: i32,

    windowWidth: i32,
    windowHeight: i32,

    rendererWidth: i32,
    rendererHeight: i32,

    xScale: f64,
    yScale: f64,
}

fn windowRect() Rect {
    return {0, 0, cast(f64) context.sdl.windowWidth, cast(f64) context.sdl.windowHeight};
}

#context cairo: struct {
    font: *cairo.FontFace,
    emojiFont: *cairo.FontFace,
    layer: Layer
}

fn initSdl() {
    err := sdl.SDL_Init(sdl.INIT_VIDEO);
    if err != 0 {
        io.println("failed to init SDL");
        panic();
    }

    window := sdl.SDL_CreateWindow("editor"|string.cstr,
        sdl.WINDOWPOS_UNDEFINED, sdl.WINDOWPOS_UNDEFINED,
        WIDTH, HEIGHT,
        8196);
    if window == nil {
        io.println("failed to create window");
        panic();
    }

    context.sdl.window = window;

    -- sdlRenderFlags: i32 = 6;
    sdlRenderFlags: i32 = 0;
    context.sdl.renderer = sdl.SDL_CreateRenderer(context.sdl.window, -1, sdlRenderFlags);

    -- Compute screen resolution
    -- For instance, on a retina screen, renderer size is twice as window size
    sdl.SDL_GetWindowSize(context.sdl.window, &context.sdl.windowWidth, &context.sdl.windowHeight);

    sdl.SDL_GetRendererOutputSize(context.sdl.renderer, &context.sdl.rendererWidth, &context.sdl.rendererHeight);

    context.sdl.texture = sdl.SDL_CreateTexture(context.sdl.renderer,
        sdl.PIXEL_FORMAT_ARGB8888,
        sdl.TextureAccess.STREAMING,
        context.sdl.rendererWidth, context.sdl.rendererHeight);

    sdl.SDL_LockTexture(context.sdl.texture, nil, &context.sdl.pixels, &context.sdl.pitch);

    context.sdl.xScale = cast(f64) context.sdl.rendererWidth / cast(f64) context.sdl.windowWidth;
    context.sdl.yScale = cast(f64) context.sdl.rendererHeight / cast(f64) context.sdl.windowHeight;
}

fn initCairo() {
    -- Get Cairo surface form SDL2 surface
    context.cairo.layer.surface = cairo.cairo_image_surface_create_for_data(
                cast() context.sdl.pixels,
                cairo.FORMAT_ARGB32,
                context.sdl.rendererWidth,
                context.sdl.rendererHeight,
                context.sdl.rendererWidth * 4);

    context.cairo.layer.context = cairo.cairo_create(context.cairo.layer.surface);

    cairo.cairo_surface_set_device_scale(context.cairo.layer.surface, context.sdl.xScale, context.sdl.yScale);
}

fn distance(p1: !P/Point, p2: P) {
    dx := (p1.x - p2.x);
    dy := (p1.y - p2.y);
    return math.csqrt(dx*dx + dy*dy);
}

#context arrowCursor: *sdl.Cursor
#context arrowCursorWE: *sdl.Cursor
#context arrowCursorNS: *sdl.Cursor
#context arrowCursorHand: *sdl.Cursor

fn init() {
    initSdl();
    initCairo();

    context.quit = false;

    context.frame = 0;

    #import "time";
    tv: time.TimeVal;
    time.gettimeofday(&tv, nil);
    context.start = tv;

    context.lastFrameTime = context.start;

    context.arrowCursor = sdl.SDL_CreateSystemCursor(sdl.CursorType.ARROW);
    context.arrowCursorWE = sdl.SDL_CreateSystemCursor(sdl.CursorType.SIZEWE);
    context.arrowCursorNS = sdl.SDL_CreateSystemCursor(sdl.CursorType.SIZENS);
    context.arrowCursorHand = sdl.SDL_CreateSystemCursor(sdl.CursorType.HAND);
}

fn drawRect(layer: Layer, rect: Rect, r: f64, g: f64, b: f64, a: f64 = 1) {
    cairo.cairo_save(layer.context);
    defer { cairo.cairo_restore(layer.context); }

    cairo.cairo_set_source_rgba(layer.context, r, g, b, a);
    cairo.cairo_rectangle(layer.context, rect.x, rect.y, rect.width, rect.height);
    cairo.cairo_fill(layer.context);
}

fn drawOutline(layer: Layer, rect: Rect, r: f64, g: f64, b: f64, a: f64 = 1, lineWidth: f64 = 1) {
    cairo.cairo_save(layer.context);
    defer { cairo.cairo_restore(layer.context); }

    cairo.cairo_set_source_rgba(layer.context, r, g, b, a);

    cairo.cairo_set_line_width(layer.context, lineWidth);

    cairo.cairo_move_to(layer.context, rect.x, rect.y);
    cairo.cairo_line_to(layer.context, rect.x + rect.width, rect.y);
    cairo.cairo_line_to(layer.context, rect.x + rect.width, rect.y + rect.height);
    cairo.cairo_line_to(layer.context, rect.x, rect.y + rect.height);
    cairo.cairo_line_to(layer.context, rect.x, rect.y);

    cairo.cairo_stroke(layer.context);
}

fn drawRoundedRect(layer: Layer, rect: Rect, r: f64, g: f64, b: f64, radius: f64, a: f64 = 1, lineWidth: f64 = 1) {
    degrees: f64 = math.PI / 180.0;

    cairo.cairo_save(layer.context);
    defer { cairo.cairo_restore(layer.context); }

    cairo.cairo_set_source_rgba(layer.context, r, g, b, a);

    cairo.cairo_set_line_width(layer.context, lineWidth);

    cairo.cairo_new_sub_path (layer.context);

    cairo.cairo_arc(layer.context, rect.x + rect.width - radius, rect.y + radius, radius, -90 * degrees, 0 * degrees);
    cairo.cairo_arc(layer.context, rect.x + rect.width - radius, rect.y + rect.height - radius, radius, 0 * degrees, 90 * degrees);
    cairo.cairo_arc(layer.context, rect.x + radius, rect.y + rect.height - radius, radius, 90 * degrees, 180 * degrees);
    cairo.cairo_arc(layer.context, rect.x + radius, rect.y + radius, radius, 180 * degrees, 270 * degrees);

    cairo.cairo_close_path(layer.context);

    cairo.cairo_stroke(layer.context);
}

fn drawCircle(layer: Layer, center: Point!(f64), radius: f64, r: f64, g: f64, b: f64, a: f64 = 1, lineWidth: f64 = 1) {
    cairo.cairo_save(layer.context);
    defer { cairo.cairo_restore(layer.context); }

    cairo.cairo_set_source_rgba(layer.context, r, g, b, a);
    cairo.cairo_set_line_width(layer.context, lineWidth);
    cairo.cairo_new_sub_path (layer.context);
    cairo.cairo_arc(layer.context, center.x, center.y, radius, 0, 2 * math.PI);
    cairo.cairo_close_path(layer.context);
    cairo.cairo_stroke(layer.context);
}

fn drawArc(layer: Layer, center: Point!(f64), radius: f64, ø1: f64, ø2: f64, r: f64, g: f64, b: f64, a: f64 = 1, lineWidth: f64 = 1) {
    cairo.cairo_save(layer.context);
    defer { cairo.cairo_restore(layer.context); }

    cairo.cairo_set_line_cap(layer.context, cairo.LineCap.ROUND);

    cairo.cairo_set_source_rgba(layer.context, r, g, b, a);
    cairo.cairo_set_line_width(layer.context, lineWidth);
    cairo.cairo_new_sub_path (layer.context);
    cairo.cairo_arc(layer.context, center.x, center.y, radius, ø1, ø2);
    cairo.cairo_stroke(layer.context);
}

fn drawLine(layer: Layer, br: Rect, r: f64, g: f64, b: f64, a: f64 = 1, width: f64 = 1) {
    cairo.cairo_save(layer.context);
    defer { cairo.cairo_restore(layer.context); }

    cairo.cairo_set_source_rgba(layer.context, r, g, b, a);

    cairo.cairo_set_line_width(layer.context, width);

    cairo.cairo_move_to(layer.context, br.x, br.y);
    cairo.cairo_line_to(layer.context, br.x + br.width, br.y + br.height);

    cairo.cairo_stroke(layer.context);
}

fn drawCurve(layer: Layer, p1: Point!(f64), p2: Point!(f64), cp1: Point!(f64), cp2: Point!(f64), color: Color, width: f64 = 1) {
    cairo.cairo_save(layer.context);
    defer { cairo.cairo_restore(layer.context); }

    cairo.cairo_set_line_cap(layer.context, cairo.LineCap.ROUND);

    cairo.cairo_set_source_rgba(layer.context, color.r, color.g, color.b, color.a);

    cairo.cairo_set_line_width(layer.context, width);

    cairo.cairo_move_to(layer.context, p1.x, p1.y);
    cairo.cairo_curve_to(layer.context, cp1.x, cp1.y, cp2.x, cp2.y, p2.x, p2.y);

    cairo.cairo_stroke(layer.context);
}

fn commit() {
    -- Render SDL2 surface onto SDL2 renderer
    sdl.SDL_UpdateTexture(context.sdl.texture, nil, context.sdl.pixels, context.sdl.pitch);
    sdl.SDL_RenderCopy(context.sdl.renderer, context.sdl.texture, nil, nil);
    sdl.SDL_RenderPresent(context.sdl.renderer);
}

fn shutdown() {
    cairo.cairo_surface_destroy(context.cairo.layer.surface);
    cairo.cairo_destroy(context.cairo.layer.context);

    sdl.SDL_Quit();
}

fn clear(c: *cairo.Context) {
    cairo.cairo_save(c);
    defer { cairo.cairo_restore(c); }

    cairo.cairo_set_operator(c, cairo.Operator.CLEAR);
    cairo.cairo_paint(c);
}

fn clearRect(c: *cairo.Context, rect: Rect) {
    cairo.cairo_save(c);
    defer { cairo.cairo_restore(c); }

    cairo.cairo_set_operator(c, cairo.Operator.CLEAR);
    cairo.cairo_fill(c);
}

#context quit: bool

#context mouseMotionEvent: *sdl.MouseMotionEvent
#context mouseWheelEvent: *sdl.MouseWheelEvent
#context mouseButtonDownEvent: *sdl.MouseButtonEvent
#context mouseButtonUpEvent: *sdl.MouseButtonEvent
#context keyDownEvent: *sdl.KeyboardEvent
#context keyUpEvent: *sdl.KeyboardEvent
#context modifierKeys: struct {
    shift: bool,
    ctrl: bool
}
#context multiGestureEvent: *sdl.MultiGestureEvent

fn processEvents() {
    event: sdl.Event;

    while sdl.SDL_PollEvent(&event) != 0 {
        if event._type == sdl.QUIT {
            shutdown();
            context.quit = true;
            io.printFln("% frames/sec", {cast(f64) context.frame / cast() context.elapsed.sec});
            return;
        }
        else if event._type == sdl.MOUSEMOTION {
            context.mouseMotionEvent = cast() mem.tmpHeap(event);

            x: i32;
            y: i32;
            sdl.SDL_GetMouseState(&x, &y);

            context.mouse.x = cast() x;
            context.mouse.y = cast() y;
        }
        else if event._type == sdl.MOUSEWHEEL {
            context.mouseWheelEvent = cast() mem.tmpHeap(event);
        }
        else if event._type == sdl.MOUSEBUTTONDOWN {
            context.mouseButtonDownEvent = cast() mem.tmpHeap(event);
        }
        else if event._type == sdl.MOUSEBUTTONUP {
            context.mouseButtonUpEvent = cast() mem.tmpHeap(event);
        }
        else if event._type == sdl.KEYDOWN {
            context.keyDownEvent = cast() mem.tmpHeap(event);

            if context.keyDownEvent.keysym.scancode == sdl.Key.CTRL {
                context.modifierKeys.ctrl = true;
            }
            if context.keyDownEvent.keysym.scancode == sdl.Key.SHIFT {
                context.modifierKeys.shift = true;
            }
        }
        else if event._type == sdl.KEYUP {
            context.keyUpEvent = cast() mem.tmpHeap(event);

            if context.keyUpEvent.keysym.scancode == sdl.Key.CTRL {
                context.modifierKeys.ctrl = false;
            }
            if context.keyUpEvent.keysym.scancode == sdl.Key.SHIFT {
                context.modifierKeys.shift = false;
            }
        }
        else if event._type == sdl.MULTIGESTURE {
            context.multiGestureEvent = cast() mem.tmpHeap(event);
        }
    }
}

#context frame: u64
#context start: time.TimeVal
#context lastFrameTime: time.TimeVal
#context dt: time.TimeVal
#context elapsed: time.TimeVal

fn tick() {
    context.frame += 1;

    cur: time.TimeVal;
    time.gettimeofday(&cur, nil);

    context.dt.sec = cur.sec - context.lastFrameTime.sec;
    context.dt.usec = cur.usec - context.lastFrameTime.usec;

    context.elapsed.sec = cur.sec - context.start.sec;
    context.elapsed.usec = cur.usec - context.start.usec;

    context.lastFrameTime = cur;

    basic.resetTmp();

    context.mouseMotionEvent = nil;
    context.mouseWheelEvent = nil;
    context.mouseButtonDownEvent = nil;
    context.mouseButtonUpEvent = nil;
    context.keyDownEvent = nil;
    context.keyUpEvent = nil;
    context.multiGestureEvent = nil;

    processEvents();

    -- io.println(context.frame);
    -- io.println("-------");
}

