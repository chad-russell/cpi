#import "sdl";
#import "buffer": buf;
#import "io";
#import "cairo";
#import "mem";
#import "string";
#import "iter";
#import "time";

WIDTH   : i32 = 800;
HEIGHT  : i32 = 350;

DRAW        := "draw";
MOUSEDOWN   := "mousedown";
MOUSEMOVE   := "mousemove";
MOUSEUP     := "mouseup";
MOUSESCROLL := "mousescroll";
KEYDOWN     := "keydown";

type Color struct {
    r: f64,
    g: f64,
    b: f64,
    a: f64 = 1.0
}

#context mouse: struct {
    x: i32,
    y: i32
}

type MouseMessageData struct {
    x: f64,
    y: f64
}

type MouseScrollMessageData struct {
    x: f64,
    y: f64,
    flipped := false
}

type KeyboardMessageData struct {
    scancode: sdl.Key
}

type Rect(T := typeof(x)) struct {
    x: T,
    y: T,
    width: T,
    height: T
}

#attr(Rect) {
fn contains(T := typeof(r.x))(r: !R/Rect, x: T, y: T) {
    return r.x <= x
       and r.x + r.width >= x
       and r.y <= y
       and r.y + r.height >= y;
}

fn intersects(r1: !R/Rect, r2: R) {
    xIntercept := false;
    yIntercept := false;

    -- left edge of r1 within r2
    if r1.x > r2.x and r1.x < r2.x + r2.width {
        xIntercept = true;
    }

    -- right edge of r1 within r2
    if r1.x + r1.width > r2.x and r1.x + r1.width < r2.x + r2.width {
        xIntercept = true;
    }

    -- top edge of r1 within r2
    if r1.y > r2.y and r1.y < r2.y + r2.height {
        yIntercept = true;
    }

    -- bottom edge of r1 within r2
    if r1.y + r1.height > r2.y and r1.y + r1.height < r2.y + r2.height {
        yIntercept = true;
    }

    return xIntercept and yIntercept;
}
}

type Point(T := typeof(x)) struct {
    x: T,
    y: T,
}

type Message struct {
    name: []i8,
    data: *none
}

type ReceiverHandler fn(formId: i64, formData: *none, messageData: *none) none

type Receiver struct {
    name: []i8,
    handle: ReceiverHandler
}

type Layer struct {
    surface: *cairo.Surface,
    context: *cairo.Context
}

type Form struct {
    rect: Rect!(f64),
    layer: *Layer,
    receivers: *buf.Buffer!(Receiver),
    data: *none,
}

fn addReceiver(formId: i64, name: []i8, handler: ReceiverHandler) {
    context.forms.buf[formId].receivers|:append({ name|string.strcpy, handler });
}

fn removeReceiver(formId: i64, name: []i8) {
    f := &context.forms.buf[formId];

    count := f.receivers.buf.count;
    f.receivers.buf.count = 0;

    i := 0;
    while i < count {
        it := f.receivers.buf[i];
        if string.streq(it.name, name) {
            mem.free(it.name.data);
        }
        else {
            f.receivers|:append(it);
        }
        i += 1;
    }
}

#context forms: *buf.Buffer!(Form)
#context drawers: *buf.Buffer!(i64)
#context mousers: *buf.Buffer!(i64)
#context texters: *buf.Buffer!(i64)
#context scrollers: *buf.Buffer!(i64)
#context animators: *buf.Buffer!(i64)

#context formDatas: basic.Region

#context messages: buf.Buffer!(Message)

fn makeLayer(rect: Rect!(f64)) {
    layerSurface := cairo.cairo_image_surface_create(cairo.FORMAT_ARGB32,
        cast() rect.width,
        cast() rect.height);

    layerContext := cairo.cairo_create(layerSurface);

    cairo.cairo_surface_set_device_scale(layerSurface, context.sdl.xScale, context.sdl.yScale);

    return mem.heap(cast(Layer) {layerSurface, layerContext});
}

fn makeFormNonScaled(r: Rect!(f64), data: !T, ownLayer := false) {
    scaled: Rect!(f64) = {
        r.x * cast() context.sdl.xScale,
        r.y * cast() context.sdl.yScale,
        r.width * cast() context.sdl.xScale,
        r.height * cast() context.sdl.yScale,
    };

    f: Form;
    f.rect = scaled;
    f.data = context.formDatas.current;
    f.receivers = buf.make!(Receiver)();

    if ownLayer {
        f.layer = makeLayer(scaled);
    }
    else {
        f.layer = &context.cairo.layer;
    }

    ^(cast(*T) context.formDatas.current) = data;
    context.formDatas.current += sizeof(T);

    &context.forms|:append(f);
    id := context.forms.buf.count - 1;

    return id;
}

fn makeForm(r: Rect!(f64), data: !T, ownLayer := false) {
    xScale := cast(f64) context.sdl.surface.w / context.sdl.xScale;
    yScale := cast(f64) context.sdl.surface.h / context.sdl.yScale;

    scaled: Rect!(f64) = {
        r.x * xScale,
        r.y * yScale,
        r.width * xScale,
        r.height * yScale
    };

    f: Form;
    f.rect = scaled;
    f.data = context.formDatas.current;
    f.receivers = buf.make!(Receiver)();
    if ownLayer {
        layerRect: Rect!(f64) = {
            0,
            0,
            r.width * cast() context.sdl.surface.w,
            r.height * cast() context.sdl.surface.h
        };
        f.layer = makeLayer(layerRect);
    }
    else {
        f.layer = &context.cairo.layer;
    }

    ^(cast(*T) context.formDatas.current) = data;
    context.formDatas.current += sizeof(T);

    &context.forms|:append(f);
    id := context.forms.buf.count - 1;

    return id;
}

fn sendMessage(formId: i64, message: Message) {
    form := &context.forms.buf[formId];

    for r: form.receivers.buf {
        if string.streq(message.name, r.name) {
            r.handle(formId, form.data, message.data);
        }
    }
}

fn broadcast(name: []i8, data := nil) {
    &context.messages|:append({name|string.tmpcpy, data});
}

fn processMessages() {
    for message: context.messages.buf {
        for id: iter.until(context.forms.buf.count) {
            sendMessage(id, message);
        }
    }
}

fn drawForm(formId: i64) {
    form := &context.forms.buf[formId];

    formId|clearForm;
    sendMessage(formId, {DRAW, nil});

    if form.layer != &context.cairo.layer {
        cairo.cairo_save(context.cairo.layer.context);
        defer { cairo.cairo_restore(context.cairo.layer.context); }

        cairo.cairo_set_source_surface(context.cairo.layer.context, form.layer.surface, form.rect.x, form.rect.y);
        cairo.cairo_rectangle(context.cairo.layer.context, form.rect.x, form.rect.y, form.rect.width, form.rect.height);
        cairo.cairo_fill(context.cairo.layer.context);
    }
}

fn drawAllForms() {
    for form: iter.until(context.forms.buf.count) {
        drawForm(form);
    }

    commit();
}

fn drawUpdatedForms() {
    update := false;

    for form: context.drawers.buf {
        update = true;
        drawForm(form);
    }

    for animatorId: context.animators.buf {
        update = true;

        for coveringId: iter.until(context.forms.buf.count) {
            covering := &context.forms.buf[coveringId];
            animator := &context.forms.buf[animatorId];

            if animator.rect|:intersects(covering.rect) {
                -- if it has it's own form then no need to explicitly redraw. Otherwise, redraw
                if covering.layer != &context.cairo.layer {
                    cairo.cairo_set_source_surface(context.cairo.layer.context, covering.layer.surface, covering.rect.x, covering.rect.y);
                    cairo.cairo_rectangle(context.cairo.layer.context, animator.rect.x, animator.rect.y, animator.rect.width, animator.rect.height);
                    cairo.cairo_fill(context.cairo.layer.context);
                }
                else {
                    drawForm(coveringId);
                }
            }
        }

        drawForm(animatorId);
    }

    -- todo(chad): `if update {` doesn't work... :(
    if update == true {
        commit();
    }
}

fn setNeedsDraw(formId: i64, formData: *none, messageData: *none) {
    &context.drawers|:append(formId);
}

fn setFormNeedsDraw(formId: i64) {
    &context.drawers|:append(formId);
}

#context sdl: struct {
    window: *sdl.Window,
    surface: *sdl.Surface,
    renderer: *sdl.Renderer,

    texture: *sdl.Texture,
    pixels: *none,
    pitch: i32,

    windowWidth: i32,
    windowHeight: i32,

    rendererWidth: i32,
    rendererHeight: i32,

    xScale: f64,
    yScale: f64,
}

#context cairo: struct {
    font: *cairo.FontFace,
    layer: Layer
}

fn initSdl() {
    err := sdl.SDL_Init(sdl.INIT_VIDEO);
    if err != 0 {
        io.println("failed to init SDL");
        panic();
    }

    window := sdl.SDL_CreateWindow("text"|string.cstr,
        sdl.WINDOWPOS_UNDEFINED, sdl.WINDOWPOS_UNDEFINED,
        WIDTH, HEIGHT,
        8196);
    if window == nil {
        io.println("failed to create window");
        panic();
    }

    context.sdl.window = window;

    sdlRenderFlags: i32 = 6;
    context.sdl.renderer = sdl.SDL_CreateRenderer(context.sdl.window, -1, 0);

    -- Compute screen resolution
    -- For instance, on a retina screen, renderer size is twice as window size
    sdl.SDL_GetWindowSize(context.sdl.window, &context.sdl.windowWidth, &context.sdl.windowHeight);

    sdl.SDL_GetRendererOutputSize(context.sdl.renderer, &context.sdl.rendererWidth, &context.sdl.rendererHeight);

    -- Create a SDL surface for Cairo to render onto
    context.sdl.surface = sdl.SDL_CreateRGBSurface(
            0,
            context.sdl.rendererWidth,
            context.sdl.rendererHeight,
            32,
            0x00ff0000,
            0x0000ff00,
            0x000000ff,
            0xff000000
    );

    context.sdl.texture = sdl.SDL_CreateTexture(context.sdl.renderer,
        sdl.PIXEL_FORMAT_ARGB8888,
        sdl.TextureAccess.STREAMING,
        context.sdl.rendererWidth, context.sdl.rendererHeight);

    sdl.SDL_LockTexture(context.sdl.texture, nil, &context.sdl.pixels, &context.sdl.pitch);

    context.sdl.xScale = cast(f64) context.sdl.rendererWidth / cast(f64) context.sdl.windowWidth;
    context.sdl.yScale = cast(f64) context.sdl.rendererHeight / cast(f64) context.sdl.windowHeight;
}

fn initCairo() {
    -- Get Cairo surface form SDL2 surface
    context.cairo.layer.surface = cairo.cairo_image_surface_create_for_data(
                cast() context.sdl.pixels,
                cairo.FORMAT_ARGB32,
                context.sdl.surface.w,
                context.sdl.surface.h,
                context.sdl.surface.pitch);

    context.cairo.layer.context = cairo.cairo_create(context.cairo.layer.surface);

    cairo.cairo_surface_set_device_scale(context.cairo.layer.surface, context.sdl.xScale, context.sdl.yScale);
}

fn initContext() {
    #import "mem";

    -- start with 1MB
    -- todo(chad): make this auto-expanding
    size := 1024 * 1024;

    context.formDatas.count = size;
    context.formDatas.data = mem.calloc(size, sizeof(i8));
    context.formDatas.current = context.formDatas.data;

    context.forms = buf.make!(Form)();
    context.drawers = buf.make!(i64)();
    context.mousers = buf.make!(i64)();
    context.texters = buf.make!(i64)();
    context.scrollers = buf.make!(i64)();
    context.animators = buf.make!(i64)();
}

fn init() {
    initContext();
    initSdl();
    initCairo();

    context.quit = false;
}

fn drawRect(formId: i64, rect: Rect!(f64), r: f64, g: f64, b: f64, a: f64 = 1) {
    form := &context.forms.buf[formId];

    cairo.cairo_save(form.layer.context);
    defer { cairo.cairo_restore(form.layer.context); }

    cairo.cairo_set_source_rgba(form.layer.context, r, g, b, a);
    if form.layer == &context.cairo.layer {
        cairo.cairo_rectangle(form.layer.context, form.rect.x + rect.x, form.rect.y + rect.y, rect.width, rect.height);
    }
    else {
        cairo.cairo_rectangle(form.layer.context, rect.x, rect.y, rect.width, rect.height);
    }
    cairo.cairo_fill(form.layer.context);
}

fn commit() {
    -- Render SDL2 surface onto SDL2 renderer
    sdl.SDL_UpdateTexture(context.sdl.texture, nil, context.sdl.pixels, context.sdl.pitch);
    sdl.SDL_RenderCopy(context.sdl.renderer, context.sdl.texture, nil, nil);
    sdl.SDL_RenderPresent(context.sdl.renderer);
}

fn shutdown() {
    cairo.cairo_surface_destroy(context.cairo.layer.surface);
    cairo.cairo_destroy(context.cairo.layer.context);

    sdl.SDL_FreeSurface(context.sdl.surface);
    sdl.SDL_Quit();
}

fn clearRect(layer: *Layer, rect: Rect!(f64)) {
    cairo.cairo_save(layer.context);
    defer { cairo.cairo_restore(layer.context); }

    cairo.cairo_set_source_rgba(layer.context, 0, 0, 0, 0);
    cairo.cairo_set_operator(layer.context, cairo.Operator.SOURCE);
    if layer == &context.cairo.layer {
        cairo.cairo_rectangle(layer.context, rect.x, rect.y, rect.width, rect.height);
    }
    else {
        cairo.cairo_rectangle(layer.context, 0, 0, rect.width, rect.height);
    }
    cairo.cairo_fill(layer.context);
}

fn clearForm(formId: i64) {
    form := &context.forms.buf[formId];
    clearRect(form.layer, form.rect);
}

#context quit: bool

fn processEvents() {
    event: sdl.Event;

    while sdl.SDL_PollEvent(&event) != 0 {
        if event._type == sdl.QUIT {
            shutdown();
            context.quit = true;
            io.printFln("% frames/sec", {cast(f64) context.frame / (cast(f64) context.elapsed / cast(f64) time.CLOCKS_PER_SEC)});
            return;
        }
        else if event._type == sdl.MOUSEMOTION {
            mouseEvent := cast(*sdl.MouseMotionEvent) &event;
            if !(mouseEvent.xrel == 0 and mouseEvent.yrel == 0) {
                sdl.SDL_GetMouseState(&context.mouse.x, &context.mouse.y);

                mmd: MouseMessageData = {x: cast() context.mouse.x, y: cast() context.mouse.y};
                for formId: context.mousers.buf {
                    formId|sendMessage(cast() {MOUSEMOVE, &mmd});
                }
            }
        }
        else if event._type == sdl.MOUSEWHEEL {
            mouseEvent := cast(*sdl.MouseWheelEvent) &event;

            msd: MouseScrollMessageData = {x: cast() mouseEvent.x, y: cast() mouseEvent.y, flipped: mouseEvent.direction == sdl.Direction.FLIPPED};
            for formId: context.scrollers.buf {
                formId|sendMessage(cast() {MOUSESCROLL, &msd});
            }
        }
        else if event._type == sdl.MOUSEBUTTONDOWN {
            mouseEvent := cast(*sdl.MouseButtonEvent) &event;

            mmd: MouseMessageData = {x: cast() context.mouse.x, y: cast() context.mouse.y};
            for formId: context.mousers.buf {
                form := &context.forms.buf[formId];
                if form.rect|:contains(mmd.x, mmd.y) {
                    formId|sendMessage(cast() {MOUSEDOWN, &mmd});
                }
            }
        }
        else if event._type == sdl.MOUSEBUTTONUP {
            mouseEvent := cast(*sdl.MouseButtonEvent) &event;

            mmd: MouseMessageData = {x: cast() context.mouse.x, y: cast() context.mouse.y};
            for formId: context.mousers.buf {
                formId|sendMessage(cast() {MOUSEUP, &mmd});
            }
        }
        else if event._type == sdl.KEYDOWN {
            keyboardEvent := cast(*sdl.KeyboardEvent) &event;
            -- io.println(cast(i32) keyboardEvent.keysym.scancode);

            kd: KeyboardMessageData = {scancode: keyboardEvent.keysym.scancode};
            for formId: context.texters.buf {
                formId|sendMessage(cast() {KEYDOWN, &kd});
            }
        }
    }
}

#context frame: u64
#context start: u64
#context dt: u64
#context elapsed: u64

fn loop() {
    context.frame = 0;

    drawAllForms();

    #import "time";
    context.start = time.clock();
    lastFrameTime := context.start;

    while true and context.quit == false {
        cur := time.clock();
        context.dt = cur - lastFrameTime;
        context.elapsed = cur - context.start;
        lastFrameTime = cur;

        -- reset temporary storage
        basic.resetTmp();

        -- reset messages
        context.drawers.buf.count = 0;
        context.messages.buf.count = 0;

        processEvents();

        processMessages();
        drawUpdatedForms();

        -- io.println(context.frame);
        -- io.println("-------");

        context.frame += 1;
    }
}
