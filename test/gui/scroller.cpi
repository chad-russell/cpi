#import "gui/gui";
#import "sdl";
#import "io";
#import "math";

type Data struct {
    rect: gui.Rect!(f64),

    horizontal: bool,

    begin: f64,
    end: f64 = 100,

    mouseOverBeginResize: bool,
    mouseOverEndResize: bool,

    resizingBegin: bool,
    resizingEnd: bool,

    dragging: bool,
    dragStartBegin: f64,
    dragStartEnd: f64,
    dragStartMouse: f64
}

fn effectiveRect(data: *Data) gui.Rect!(f64) {
    if data.horizontal == true {
        return {
            data.begin,
            data.rect.y,
            data.end - data.begin,
            data.rect.height
        };
    }

    return {
        data.rect.x,
        data.begin,
        data.rect.width,
        data.end - data.begin
    };
}

fn drawVertical(rect: gui.Rect!(f64), data: *Data) {
    data.horizontal = false;
    data.rect = rect;

    er := effectiveRect(data);

    gui.drawRect(context.cairo.layer,
        er,
        0.9, 0.9, 0.6);

    -- resize lines
    gui.drawLine(context.cairo.layer,
        {er.x + 1, er.y + 4, er.width - 2, 0},
        0.2, 0.2, 0.2, 0.7,
        lineWidth: 1);

    gui.drawLine(context.cairo.layer,
        {er.x + 1, er.y + er.height - 4, er.width - 2, 0},
        0.2, 0.2, 0.2, 0.7,
        lineWidth: 1);
}

fn drawHorizontal(rect: gui.Rect!(f64), data: *Data) {
    data.horizontal = true;
    data.rect = rect;

    er := effectiveRect(data);

    gui.drawRect(context.cairo.layer,
        er,
        0.9, 0.9, 0.6);

    -- resize lines
    gui.drawLine(context.cairo.layer,
        {er.x + 4, er.y + 1, 0, er.height - 2},
        0.2, 0.2, 0.2, 0.7,
        lineWidth: 1);

    gui.drawLine(context.cairo.layer,
        {er.x + er.width - 4, er.y + 1, 0, er.height - 2},
        0.2, 0.2, 0.2, 0.7,
        lineWidth: 1);
}

fn mouseButtonDown(messageData: *sdl.MouseButtonEvent, data: *Data) {
    if data.mouseOverBeginResize == true {
        data.resizingBegin = true;
    }
    else if data.mouseOverEndResize == true {
        data.resizingEnd = true;
    }
    else if effectiveRect(data)|gui.containsMouse {
        data.dragging = true;
        data.dragStartBegin = data.begin;
        data.dragStartEnd = data.end;

        if data.horizontal == true {
            data.dragStartMouse = context.mouse.x;
        }
        else {
            data.dragStartMouse = context.mouse.y;
        }
    }
}

fn mouseMove(data: *Data) {
    data.mouseOverBeginResize = false;
    data.mouseOverEndResize = false;

    if data.dragging == true {
        if data.horizontal == true {
            differential := context.mouse.x - data.dragStartMouse;
            if data.dragStartBegin + differential < 0 {
                differential = -data.dragStartBegin;
            }

            data.begin = data.dragStartBegin + differential;
            data.end = data.dragStartEnd + differential;
        }
        else {
            differential := context.mouse.y - data.dragStartMouse;
            if data.dragStartBegin + differential < 0 {
                differential = -data.dragStartBegin;
            }

            data.begin = data.dragStartBegin + differential;
            data.end = data.dragStartEnd + differential;
        }
    }
    else if data.resizingBegin == true {
        if data.horizontal == true {
            data.begin = context.mouse.x;
        }
        else {
            data.begin = context.mouse.y;
        }
    }
    else if data.resizingEnd == true {
        if data.horizontal == true {
            data.end = context.mouse.x;
        }
        else {
            data.end = context.mouse.y;
        }
    }
    else {
        beginResize: gui.Rect!(f64);
        endResize: gui.Rect!(f64);

        if data.horizontal == true {
            beginResize = {data.begin, data.rect.y, 4, data.rect.height};
            endResize = {data.end - 4, data.rect.y, 4, data.rect.height};
        }
        else {
            beginResize = {data.rect.x, data.begin, data.rect.width, 4};
            endResize = {data.rect.x, data.end - 4, data.rect.width, 4};
        }

        resizeCursor: *sdl.Cursor;
        if data.horizontal == true {
            resizeCursor = context.arrowCursorWE;
        }
        else {
            resizeCursor = context.arrowCursorNS;
        }

        if beginResize|gui.containsMouse {
            data.mouseOverBeginResize = true;
            sdl.SDL_SetCursor(resizeCursor);
        }
        else if endResize|gui.containsMouse {
            data.mouseOverEndResize = true;
            sdl.SDL_SetCursor(resizeCursor);
        }
    }
}

fn mouseButtonUp(data: *Data) {
    data.dragging = false;

    data.mouseOverBeginResize = false;
    data.mouseOverEndResize = false;

    data.resizingBegin = false;
    data.resizingEnd = false;
}
