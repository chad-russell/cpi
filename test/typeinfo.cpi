type FOO struct {
    x: i64,
    y: i64
}

type ParamData2 struct {
    name: []i8,
    _type: *FOO
}

type ParamData struct {
    name:  []i8,
    _type: *TypeInfo
}

type StructData struct {
    params: []ParamData
}

type EnumData struct {
    params: []ParamData
}

type FnData struct {
    params:     []ParamData,
    returnType: *TypeInfo
}

type PointerData struct {
    underlyingType: *TypeInfo
}

type ArrayData struct {
    elementType: *TypeInfo
}

type TypeInfo union {
    NONE:          none,
    INT_LITERAL:   i64,
    I8:            none,
    I32:           none,
    I64:           none,
    FLOAT_LITERAL: f64,
    BOOLEAN:       none,
    F32:           none,
    F64:           none,
    FN:            FnData,
    STRUCT:        StructData,
    POINTER:       PointerData,
    ENUM:          EnumData,
    ARRAY:         ArrayData,
}

type Any struct {
    _type:  TypeInfo,
    value:  *none
}

fn anyof( T := typeof(t) )(t: T) {
    ret {_type: typeinfo(T), value: heap(t)};
}

fn main() {
    a : Any = {
        _type: {
            STRUCT: {
                params: []ParamData{
                    {
                        name: "fuck",
                        _type: &{I8: {}},
                    }
                }
            }
        },
        value: cast(*none) &77
    };
    ret a._type.STRUCT.params[0]._type.tag;
}
