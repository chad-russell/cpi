TODO:
    - bool should be 1 byte, not 4

    - strongly consider getting rid of unions considering we haven't used them yet....

    - #context things should be scoped -- i.e. only in the context of the module they're defined in.
        - so basically every module provides a struct to go into the master context struct, and the master context struct has
          fields with the same name as the module.

    - index arrays by unsigned integer types

    - IDEA: what if we use a rope structure for cached glyphs? (or fold the cached glyphs into our existing rope structure somehow?)
        - there are two 'value's for the leaf nodes:
             - its horizontal offset when drawing
             - its byte offset into the document
        - when insert:
            - just need to shape from the glyph right before the insert point, through all the inserted text, and through the one just after
                (pad 1 on either side in case of any combining glyphs or something weird... might need to pad a couple on either side but still)
        - when delete:
            - re-shape the glyph right before the beginning of the delete through the glyph right after the end of the delete
                (i.e. 2 glyphs...)
        - will need to keep a mapping from codepoints -> glyphs, so when we insert/delete we know where it's actually happening, in shaped glyph space
            - the 'cluster' property in GlyphInfo should take care of this (?)
        - when changing fonts, will need to do a full re-shaping

    - #attr param should be inferred based on fn args

    - get rid of automatic basic import

    -- mulitple + and - with pointers does not work!!

    - relative import directories don't really work if you're already inside a directory
        - e.g. #import "foo/foo", and foo/foo.cpi has #import "bar"
        - would want this to be "foo/bar"

    - a.b.c := "foo" is valid and does NOT do what you think it should (wait, what do you think it should do?)

    - add #nocontext annotation for fns -- these fns can be used in #if stmts, but not ones with context
        - need to validate that it doesn't call any fns from within it unless they are external or marked with #nocontext

    - support passing args to main fn

    - support profiling in interpreter

    - build a better debugger backend
        - ability to do eval in the context of a particular stack frame (e.g. eval this 3 frames ago)
        - CT arguments should show up as variables in the inspector
        - ability to set variables (where applicable)
        - support for breakpoints on columns, ranges
        - implement option to have memory as a rope structure -- infinite undo/redo of program execution state
            - will need to transition to always using the context allocator instead of libc malloc/free
            - use this for step/continue backwards in vscode
        - ctfe debugging (?)

    - switch (on enum/union)

    - report an error when passing a non-contextified fn as a fn parameter

    - operator overloading?
        +, -, *, /, comparison

    - some kind of zig-like error handling (?)

    - better unions (?)
        - @notag attribute on type decl?
        - @tag to specify which field should get used as the tag?

    - disallow modifying constantized values (i.e. any kind of lvalue assignment) for aliases, ctParams, etc

    - way to specify foreign function names different from given name
        - ```
            #foreign(glfwInit) fn init() bool
        ```

    - threading
        - for interpreter, should create another interpreter and add it to a list. Execution should round-robin over all interpreters in the list
        - for llvm version, can utilize pthread routines
        - basic:
            - create: ```
                fn foo(i: i32, s: []i8);
                #async foo(3, "a string");
            ```
            - in llvm this should translate to: ```
                pthread_t __t;
                pthread_create(&__t, nil, cast(fn(data: *none) *none) thread_init_foo, cast(*none) &{3, "a string"});
            ```
            - each function which is #async'd needs a custom init function. thread_init_foo should look like: ```
                fn thread_init_foo(data: *{_0: i32, _1: []i8}) {
                    foo(makeContext(), data._0, data._1);
                }
            ```
            - todo(chad): what about starting threads for external functions?
                - in llvm should just work
                - in interpreter, I *think* it should just be a matter of not passing the context in the calling args
            - todo(chad): what about passing parameters?
                - the parameters will have to potentially outlive the scope of the caller
                - should the compiler give an error when this is not the case? or should it just be up to the programmer to know?
            - todo(chad): what about functions which have return values
                - they should probably just get ignored (what else?)
        - advanced:
            - #async should resolve to a thread id. That thread id should also be stored in the context
            - exit current thread
            - join thread with given id

    - mutexes
        - ```
            m: mutex; -- global. This should get initialized when the program starts
            #sync(m) {
                -- do stuff. Should lock at the beginning and unlock at the end
            }
        ```

