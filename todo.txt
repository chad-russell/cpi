TODO:
    - better llvm debug support

    - better support for arrays
        - array literals
            - use malloc for now, but later on when we do allocators should be able to specify allocator
        - foreach

    - enum / tagged union

    - signed vs unsigned ints

    - parse symbols in ``
        - `one:symbol` := 3;

    - more integer formats
        - hex (0x123)
        - binary (0b10010011)

    - decide when types are matched
        - when are struct types matched nominally vs structurally?
        - when are int/float types auto-converted/promoted?
        - arrays, strings, etc.

    - pipe operator

    - defer

    - attributes

    - 'do' keyword
        - a := do(r) { r := 13; }

    - decide whether to do argument destructuring
        - would need an actual example of where it would be useful

    - real implementation for 'Any' and 'Type'

    - better interpreter debugging
        - more accurate source information
        - get list of stack variables and print their values by name

    - allocators
        - first decide what strategy we want to use (probably some kind of arena-based thing) and then do a lot of that.
        - next, decide what (if any) language-level features are needed to make this style really easy to do

    - libraries / namespaces / modules

    - array bounds checking

    - passing stack variables to polymorphic procedures?
        - first, is this even a good thing to allow?
        - implementation should just be to convert the pointer to the relative offset for the new function
            - would need a reliable way to do this in llvm world, with alignment, etc. We need to be able to subtract the sp from the address of the local